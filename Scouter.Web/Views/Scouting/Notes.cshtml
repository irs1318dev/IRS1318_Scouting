@model Scouter.Web.ViewModels.ScoutViewModel

@{
    ViewBag.Title = "Notes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
	<script>
        var vm;

		$(function ()
		{
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}
			var ScoutInfo = function ()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}
			var ScoutNotes = function ()
			{
				this.Notes = vm.notes();
				this.Team_Id = vm.model.teamID;
				this.Match_Id = vm.model.matchID;
				this.Mode = 0;
			}

            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                var self = this;
                self.model = scout;
            	self.errorMessage = ko.observable("Waiting for next Match... If you believe that you should have advance, notify the lead scout that you are infact ready to advance. Then wait for further instructions.");

            	self.disabledClicked = ko.observable(false);
            	self.ballStuckClicked = ko.observable(false);
            	self.lowPowerShotClicked = ko.observable(false);
            	self.reliableShooterClicked = ko.observable(false);
            	self.badCollectorClicked = ko.observable(false);

            	self.showWait = ko.observable(false);

            	self.notes = ko.observable("");

            	self.disabled = function()
            	{
            		self.disabledClicked(!self.disabledClicked());
            		self.setNotes();
            	}
            	self.ballStuck = function ()
            	{
            		self.ballStuckClicked(!self.ballStuckClicked());
            		self.setNotes();
            	}
            	self.lowPowerShot = function ()
            	{
            		self.lowPowerShotClicked(!self.lowPowerShotClicked());
            		self.setNotes();
            	}
            	self.reliableShooter = function ()
            	{
            		self.reliableShooterClicked(!self.reliableShooterClicked());
            		self.setNotes();
            	}
            	self.badCollector = function ()
            	{
            		self.badCollectorClicked(!self.badCollectorClicked());
            		self.setNotes();
            	}

            	self.setNotes = function()
            	{
            		self.notes("");
					if(self.disabledClicked())
						self.notes("Robot was disabled during the match. ");
            		if (self.ballStuckClicked())
            			self.notes(self.notes() + "A ball got stuck in the robot during the match. ");
            		if (self.lowPowerShotClicked())
            			self.notes(self.notes() + "low power shot? ");
            		if (self.reliableShooterClicked())
            			self.notes(self.notes() + "self robot had a reliable shooter. ");
            		if (self.badCollectorClicked())
            			self.notes(self.notes() + "self robot had a poor collector design. ");
            	}

            	self.nav = function()
            	{
            		var v = scouterDataService.getScoutData().done(function (data)
            		{
            			scouterDataService.addNotes(new ScoutNotes());
            			if (data.Match_ID == self.model.matchID())
            			{

            				var d = new ScoutInfo();
            				d.scouter = self.model.scoutID;
            				d.scouterStatus = 4;
            				d.match_Id = self.model.matchID;

            				$('#row1').collapse('hide');
            				$('#row2').collapse('hide');
            				scouterDataService.updateScoutData(ko.toJS(d)).fail(function(error)
							{
								if (error.statusText)
								{
									self.errorMessage(error.statusText);
								}

								if (error.responseText)
								{
									var
										msg = JSON.parse(error.responseText),
										keys = _.keys(msg),
										txt = '';

									_.each(keys, function (key)
									{
										txt += msg[key] + ' ';
									});
									self.errorMessage(txt);
								}

								self.errorMessage("Oops. something happened. Still waiting for a match, but the Scout Admin doesn't know.\n" + self.errorMessage());
							});
            				self.showWait(true);
            				setTimeout(self.navigation, 1000);
            			}
            			else
            			{
            				document.location = '/scouting/Auto/@Model.Scouter_Id';
            			}
            		}).fail(function (error)
            		{
            			$('#row1').collapse('hide');
            			$('#row2').collapse('hide');

						
            			if (error.statusText)
            			{
            				self.errorMessage(error.statusText);
            			}

            			if (error.responseText)
            			{
            				var
								msg = JSON.parse(error.responseText),
								keys = _.keys(msg),
								txt = '';

            				_.each(keys, function (key)
            				{
            					txt += msg[key] + ' ';
            				});
            				self.errorMessage(txt);
            			}

            			self.errorMessage("Oops. something happened.\n" + self.errorMessage());

            			setTimeout(self.navigation, 5000);
            		})
            	}

            	self.navigation = function()
            	{
            		var v = scouterDataService.getScoutData().done(function (data)
            		{
            			if (data.Match_ID != self.model.matchID())
            			{
            				document.location = '/scouting/Auto/@Model.Scouter_Id';
            			}

            			setTimeout(self.navigation, 1000);
            		}).fail(function (error)
            		{
            			$('#row1').collapse('hide');
            			$('#row2').collapse('hide');


            			if (error.statusText)
            			{
            				self.errorMessage(error.statusText);
            			}

            			if (error.responseText)
            			{
            				var
								msg = JSON.parse(error.responseText),
								keys = _.keys(msg),
								txt = '';

            				_.each(keys, function (key)
            				{
            					txt += msg[key] + ' ';
            				});
            				self.errorMessage(txt);
            			}

            			self.errorMessage("Oops. something happened.\n" + self.errorMessage());

            			setTimeout(self.navigation, 5000);
            		})
            	}

            	if (self.model.scoutID() < 4)
            	{
            		self.color = 'red';
            		self.clickColor = 'lightpink';
            		self.colorAlt = '#FF4444';
            	}
            	else
            	{
            		self.color = 'deepskyblue';
            		self.clickColor = 'lightcyan';
            		self.colorAlt = 'skyblue';
            	}

            	var d = new ScoutInfo();
            	d.scouter = self.model.scoutID;
            	d.scouterStatus = 3;
            	d.match_Id = self.model.matchID;
            	d.team_Id = self.model.teamID;

				scouterDataService.updateScoutData(ko.toJS(d));
            }
            vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
	</script>
}

<div class="row">
	Notes <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' +model.teamNumber() + ' ('+ model.teamName() + ')'" />
</div>

<div class="row panel-collapse collapse in" id="row1">
	<div data-bind="click: disabled, style: {backgroundColor: disabledClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Disabled</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: ballStuck, style: {backgroundColor: ballStuckClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Ball Stuck</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: lowPowerShot, style: {backgroundColor: lowPowerShotClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Low Power Shot</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: reliableShooter, style: {backgroundColor: reliableShooterClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Reliable Shooter</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: badCollector, style: {backgroundColor: badCollectorClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Bad Collector</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="style: {backgroundColor: colorAlt}" class="col-xs-2">
		<br />
		<br />
		<br/>
		<br />
		<br />
		<br />
	</div>
</div>
<div class="row panel-collapse collapse in" id="row2">
	<span data-bind="text: notes"></span>
</div>
<div class="row">
	<div data-bind="click: nav, style: {backgroundColor: colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Next Match</span>
		<br />
		<br />
		<br />
	</div>
	<div id="error" data-bind="visible: showWait(), style: {backgroundColor: color}" class="col-xs-10">
		<br />
		<br />
		<span data-bind="text:errorMessage()"></span>
		<br />
		<br />
	</div>
</div>