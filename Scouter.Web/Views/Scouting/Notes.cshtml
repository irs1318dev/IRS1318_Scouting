@model Scouter.Web.ViewModels.ScoutViewModel

@{
    ViewBag.Title = "Notes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
    <script>
        var vm;

        $(function ()
        {
            var Scout = function ()
            {
                this.color = ko.observable(@Model.Color);
                this.matchID = ko.observable(@Model.Match.Id);
                this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
                this.teamID = ko.observable(@Model.Team.Id);
                this.teamName = ko.observable("@Model.Team.Name");
                this.teamNumber = ko.observable(@Model.Team.Number);
                this.scoutID = ko.observable(@Model.Scouter_Id);
            }
            var ScoutInfo = function ()
            {
                this.scouter = 0;
                this.match_Id = 0;
                this.scouterStatus = 0;
                this.team_Id = 0;
            }
            var ScoutNotes = function ()
            {
                this.Notes = vm.notes();
                this.Team_Id = vm.model.teamID;
                this.Match_Id = vm.model.matchID;
                this.Mode = 0;
            }

            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                var self = this;
                self.model = scout;
                self.errorMessage = ko.observable("Waiting for next Match... If you believe that you should have advance, notify the lead scout that you are infact ready to advance. Then wait for further instructions.");

                self.leftTotesInTheWayClicked = ko.observable(false);
                self.leftContainersInTheWayClicked = ko.observable(false);
                self.blockedAlliesClicked = ko.observable(false);
                self.tippedOverClicked = ko.observable(false);
                self.disabledByJudgesClicked = ko.observable(false);
                self.mechanismBrokenClicked = ko.observable(false);
                self.mechanismJammedClicked = ko.observable(false);

                self.showWait = ko.observable(false);

                self.notes = ko.observable("");

                self.leftTotesInTheWay = function ()
                {
                    self.leftTotesInTheWayClicked(!self.leftTotesInTheWayClicked());
                    self.setNotes();
                }
                self.leftContainersInTheWay = function ()
                {
                    self.leftContainersInTheWayClicked(!self.leftContainersInTheWayClicked());
                    self.setNotes();
                }
                self.blockedAllies = function ()
                {
                    self.blockedAlliesClicked(!self.blockedAlliesClicked());
                    self.setNotes();
                }
                self.tippedOver = function ()
                {
                    self.tippedOverClicked(!self.tippedOverClicked());
                    self.setNotes();
                }
                self.disabledByJudges = function ()
                {
                    self.disabledByJudgesClicked(!self.disabledByJudgesClicked());
                    self.setNotes();
                }
                self.mechanismBroken = function ()
                {
                    self.mechanismBrokenClicked(!self.mechanismBrokenClicked());
                    self.setNotes();
                }
                self.mechanismJammed = function ()
                {
                    self.mechanismJammedClicked(!self.mechanismJammedClicked());
                    self.setNotes();
                }


                self.setNotes = function ()
                {
                    self.notes("");
                    if (self.leftTotesInTheWayClicked())
                        self.notes(self.notes() + "Robot left totes in the way. ");
                    if (self.leftContainersInTheWayClicked())
                        self.notes(self.notes() + "Robot left containers in the way. ");
                    if (self.blockedAlliesClicked())
                        self.notes(self.notes() + "Robot blocked other ally robots. ");
                    if (self.tippedOverClicked())
                        self.notes(self.notes() + "Robot fell over during the match. ");
                    if (self.disabledByJudgesClicked())
                        self.notes(self.notes() + "Robot was disabled by the judges. ");
                    if (self.mechanismBrokenClicked())
                        self.notes(self.notes() + "A mechanism broke. ");
                    if (self.mechanismJammedClicked())
                        self.notes(self.notes() + "A mechanism got jammed. ");
                }

                self.nav = function ()
                {
                    var v = scouterDataService.getScoutData().done(function (data)
                    {
                        scouterDataService.addNotes(new ScoutNotes());
                        if (data.Match_ID == self.model.matchID())
                        {

                            var d = new ScoutInfo();
                            d.scouter = self.model.scoutID;
                            d.scouterStatus = 4;
                            d.match_Id = self.model.matchID;

                            $('#row1').collapse('hide');
                            $('#row2').collapse('hide');
                            $('#row3').collapse('hide');
                            $('#row1').fadeOut();
                            $('#row2').fadeOut();
                            $('#row3').fadeOut();
                            scouterDataService.updateScoutData(ko.toJS(d)).fail(function (error)
                            {
                                if (error.statusText)
                                {
                                    self.errorMessage(error.statusText);
                                }

                                if (error.responseText)
                                {
                                    var
										msg = JSON.parse(error.responseText),
										keys = _.keys(msg),
										txt = '';

                                    _.each(keys, function (key)
                                    {
                                        txt += msg[key] + ' ';
                                    });
                                    self.errorMessage(txt);
                                }

                                self.errorMessage("Oops. something happened. Still waiting for a match, but the Scout Admin doesn't know.\n" + self.errorMessage());
                            });
                            self.showWait(true);
                            setTimeout(self.navigation, 1000);
                        }
                        else
                        {
                            document.location = '/scouting/Auto/@Model.Scouter_Id';
                        }
                    }).fail(function (error)
                    {
                        $('#row1').collapse('hide');
                        $('#row2').collapse('hide');
                        $('#row3').collapse('hide');
                        $('#row1').fadeOut();
                        $('#row2').fadeOut();
                        $('#row3').fadeOut();


                        if (error.statusText)
                        {
                            self.errorMessage(error.statusText);
                        }

                        if (error.responseText)
                        {
                            var
								msg = JSON.parse(error.responseText),
								keys = _.keys(msg),
								txt = '';

                            _.each(keys, function (key)
                            {
                                txt += msg[key] + ' ';
                            });
                            self.errorMessage(txt);
                        }

                        self.errorMessage("Oops. something happened.\n" + self.errorMessage());

                        setTimeout(self.navigation, 5000);
                    })
                }

                self.navigation = function ()
                {
                    var v = scouterDataService.getScoutData().done(function (data)
                    {
                        if (data.Match_ID != self.model.matchID())
                        {
                            document.location = '/scouting/Auto/@Model.Scouter_Id';
                        }

                        setTimeout(self.navigation, 1000);
                    }).fail(function (error)
                    {
                        $('#row1').collapse('hide');
                        $('#row2').collapse('hide');
                        $('#row3').collapse('hide');
                        $('#row1').fadeOut();
                        $('#row2').fadeOut();
                        $('#row3').fadeOut();


                        if (error.statusText)
                        {
                            self.errorMessage(error.statusText);
                        }

                        if (error.responseText)
                        {
                            var
								msg = JSON.parse(error.responseText),
								keys = _.keys(msg),
								txt = '';

                            _.each(keys, function (key)
                            {
                                txt += msg[key] + ' ';
                            });
                            self.errorMessage(txt);
                        }

                        self.errorMessage("Oops. something happened.\n" + self.errorMessage());

                        setTimeout(self.navigation, 5000);
                    })
                }

                if (self.model.scoutID() < 4)
                {
                    self.color = 'red';
                    self.clickColor = 'lightpink';
                    self.colorAlt = '#FF4444';
                }
                else
                {
                    self.color = 'deepskyblue';
                    self.clickColor = 'lightcyan';
                    self.colorAlt = 'skyblue';
                }

                var d = new ScoutInfo();
                d.scouter = self.model.scoutID;
                d.scouterStatus = 3;
                d.match_Id = self.model.matchID;
                d.team_Id = self.model.teamID;

                scouterDataService.updateScoutData(ko.toJS(d));
            }
            vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
    </script>
}

<div class="row" style="color:white">
    Notes <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' +model.teamNumber() + ' ('+ model.teamName() + ')'" />
</div>

<div class="row panel-collapse collapse in" id="row1">
    <div data-bind="click: leftTotesInTheWay, style: {backgroundColor: leftTotesInTheWayClicked() ? clickColor : colorAlt}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Left Totes in the Way</span>
        <br />
        <br />
        <br />
    </div>
    <div data-bind="click: leftContainersInTheWay, style: {backgroundColor: leftContainersInTheWayClicked() ? clickColor : color}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Left Containers in the Way</span>
        <br />
        <br />
    </div>
    <div data-bind="click: blockedAllies, style: {backgroundColor: blockedAlliesClicked() ? clickColor : colorAlt}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Blocked Allies</span>
        <br />
        <br />
        <br />
        <br />
    </div>
    <div data-bind="click: tippedOver, style: {backgroundColor: tippedOverClicked() ? clickColor : color}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Tipped Over</span>
        <br />
        <br />
        <br />
        <br />
    </div>
    <div data-bind="click: disabledByJudges, style: {backgroundColor: disabledByJudgesClicked() ? clickColor : colorAlt}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Disabled by Judges</span>
        <br />
        <br />
        <br />
    </div>
</div>
<div class="row panel-collapse collapse in" id="row2">
    <div data-bind="click: mechanismBroken, style: {backgroundColor: mechanismBrokenClicked() ? clickColor : color}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Mechanism Broke</span>
        <br />
        <br />
        <br />
    </div>

    <div data-bind="click: mechanismJammed, style: {backgroundColor: mechanismJammedClicked() ? clickColor : colorAlt}" class="col-xs-2"
         style="border-style:dashed; border-color:white;">
        <br />
        <br />
        <span>Mechanism got Jammed</span>
        <br />
        <br />
    </div>
</div>
<div class="row panel-collapse collapse in" id="row3" style="color:orange; background-color:rgba(0, 0, 0, 0.8)">
    <span data-bind ="text: notes"></span>
</div>
<div class="row">
    <div data-bind="click: nav, style: {backgroundColor: colorAlt}" class="col-xs-2">
        <br />
        <br />
        <span>Next Match</span>
        <br />
        <br />
        <br />
    </div>
    <div id="error" data-bind="visible: showWait(), style: {backgroundColor: color}" class="col-xs-10">
        <br />
        <span data-bind="text:errorMessage()"></span>
        <br />
        <br />
    </div>
</div>
