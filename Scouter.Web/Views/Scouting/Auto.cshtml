@model Scouter.Web.ViewModels.ScoutViewModel

@{
    ViewBag.Title = "Autonomous Scouter: " + Model.Scouter_Id;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
    <script>
		$(function ()
		{
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}
			var Event = function()
			{
				this.id = 0;
				this.scouter_Id = 0;
				this.robotMode = 0;
				this.robotEventType = 0;
				this.goalWasHot = false;
			}
			var ScoutInfo = function()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}

			var ScoutNotes = function()
			{
				this.Notes = notes.value;
				this.Team_Id = vm.model.teamID;
				this.Match_Id = vm.model.matchID;
				this.Mode = 1;
			}
            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                this.model = scout;

                //Add isClicked Booleans here/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                this.numMovedTotesToAutoClicked = ko.observable(false);

                //Add Count integers here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	this.numMovedTotesToAutoCount = ko.observable(0);

            	this.resetButtonClicked = function()
            	{
                    //Set all isClickd booleans to false here/////////////////////////////////////////////////////////////////////////////////////////////
            	    vm.numMovedTotesToAutoClicked(false);
            	}
                
                //Add on clicked functions here///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	this.numMovedTotesToAuto = function()
            	{
                    //reset all buttons to original color and then set this button to clicked color
            	    this.resetButtonClicked();
            	    this.numMovedTotesToAutoClicked(true);
                    
                    //add one to the count of clicks
            	    vm.numMovedTotesToAutoCount(vm.numMovedTotesToAutoCount() + 1);

                    //Create a new robot event and set it's variables
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;    //You may want to remove magic numbers
            		e.robotEventType = 2;
            		e.goalWasHot = true;

                    //Send the robot event to the server
            		scouterDataService.save(ko.toJS(e));
            	}


            	this.updateCounter = function()
            	{
            		scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
            		{
                        //set your counts to the server counts////////////////////////////////////////////////////////////////////////////////////////////
            		    vm.numMovedTotesToAutoCount(data.HighHotCount);
            		})
            	}

            	this.nav = function ()
            	{
            		document.location = '/Scouting/Teleop/@Model.Scouter_Id';
            	}

                //set the colors for the buttons
            	if (this.model.scoutID() < 4)//red scouts
            	{
            		this.color = 'red';
            		this.clickColor = 'pink';
            		this.colorAlt = '#FF4444';
            	}
            	else//blue scouts
            	{
            		this.color = 'deepskyblue';
            		this.clickColor = 'lightblue';
            		this.colorAlt = 'skyblue';
            	}

                //tell the server that you are in autonomous
            	var d = new ScoutInfo();
            	d.scouter = this.model.scoutID;
            	d.scouterStatus = 1;
            	d.match_Id = this.model.matchID;
            	d.team_Id = this.model.teamID;

            	scouterDataService.updateScoutData(ko.toJS(d)).done(function (data)
            	{
            		vm.updateCounter();
            	});
            	
            }

            //create the viewmodel and apply bindings
            var vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
    </script>
}

<div class="row">
<span style="color:red">Autonomous</span> <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' + model.teamNumber() + ' ('+ model.teamName() + ')'"/>
</div>

<div class="row">
    Totes
</div>
<div class="row">
    <!-- This is where you should create the buttons for the row. the color should either be color or colorAlt(or any other colors you define)
         the class that I was using for the "small" buttons was col-xs-2 and col-xs-4 for the longer ones. One limitation of Bootstraps
         tables is that the rows can have a max of 12 columns -->

    <!-- data-bind="click: <your onClickeFunction>, style: {backgroundColor: <your isClickedBoolean>() ? clickColor : [color | colorAlt]} class="col-xs-2"-->
    <div style="border-style: solid; border-width: medium; border-color: white" data-bind="click: numMovedTotesToAuto, style: {backgroundColor: numMovedTotesToAutoClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span># Moved to Auto</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: numMovedTotesToAutoCount()"></span>
        <br />
        <br />
    </div>
</div>
<div class="row">
	<div data-bind="click: nav, style: {backgroundColor: color}" class="col-xs-2">
		<br />
		<br />
		<span>Teleop</span>
		<br />
		<br />
		<br />
	</div>
</div>