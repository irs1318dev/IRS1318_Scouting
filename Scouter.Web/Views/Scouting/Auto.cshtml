@model Scouter.Web.ViewModels.ScoutViewModel

@{
    ViewBag.Title = "Autonomous Scouter: " + Model.Scouter_Id;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
    <script>
		$(function ()
		{
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}
			var Event = function()
			{
				this.id = 0;
				this.scouter_Id = 0;
				this.robotMode = 0;
				this.robotEventType = 0;
				this.goalWasHot = false;
			}
			var ScoutInfo = function()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}

			var ScoutNotes = function()
			{
				this.Notes = notes.value;
				this.Team_Id = vm.model.teamID;
				this.Match_Id = vm.model.matchID;
				this.Mode = 1;
			}
            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
            	this.model = scout;
            	this.highClicked = ko.observable(false);
            	this.highHotClicked = ko.observable(false);
            	this.highMissedClicked = ko.observable(false);
            	this.autonMovedClicked = ko.observable(false);
            	this.goalieStartClicked = ko.observable(false);
            	this.lowHotClicked = ko.observable(false);
            	this.lowClicked = ko.observable(false);
            	this.lowMissedClicked = ko.observable(false);
            	this.blockedClicked = ko.observable(false);
            	this.foulClicked = ko.observable(false);
            	this.techFoulClicked = ko.observable(false);
            	this.oopsClicked = ko.observable(false);

            	this.highCount = ko.observable(0);
            	this.highHotCount = ko.observable(0);
            	this.highMissedCount = ko.observable(0);
            	this.lowHotCount = ko.observable(0);
            	this.lowCount = ko.observable(0);
            	this.lowMissedCount = ko.observable(0);
            	this.blockedCount = ko.observable(0);
            	this.foulCount = ko.observable(0);
            	this.techFoulCount = ko.observable(0);

            	this.clear = function()
            	{
            		vm.highClicked(false);
            		vm.highHotClicked(false);
            		vm.highMissedClicked(false);
            		vm.autonMovedClicked(false);
            		vm.goalieStartClicked(false);
            		vm.lowHotClicked(false);
            		vm.lowClicked(false);
            		vm.lowMissedClicked(false);
            		vm.foulClicked(false);
            		vm.techFoulClicked(false);
            		vm.blockedClicked(false);
            		vm.oopsClicked(false);
            	}

            	this.highShotHot = function()
            	{
            		this.clear();
            		vm.highHotCount(vm.highHotCount() + 1);
            		this.highHotClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 2;
            		e.goalWasHot = true;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.highShot = function()
            	{
            		this.clear();
            		vm.highCount(vm.highCount() + 1);
            		this.highClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 2;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.highShotMissed = function()
            	{
            		this.clear();
            		vm.highMissedCount(vm.highMissedCount() + 1);
            		this.highMissedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 4;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.autonMoved = function()
            	{
            		this.clear();
            		this.autonMovedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 8;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.goalieStart = function()
            	{
            		this.clear();
            		this.goalieStartClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 0;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lowShotHot = function()
            	{
            		this.clear();
            		vm.lowHotCount(vm.lowHotCount() + 1);
            		this.lowHotClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 1;
            		e.goalWasHot = true;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lowShot = function()
            	{
            		this.clear();
            		vm.lowCount(vm.lowCount() + 1);
            		this.lowClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 1;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lowShotMissed = function()
            	{
            		this.clear();
            		vm.lowMissedCount(vm.lowMissedCount() + 1);
            		this.lowMissedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 3;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.blocked = function()
            	{
            		this.clear();
            		vm.blockedCount(vm.blockedCount() + 1);
            		this.blockedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 9;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.foul = function()
            	{
            		this.clear();
            		vm.foulCount(vm.foulCount() + 1);
            		this.foulClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 12;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.techFoul = function()
            	{
            		this.clear();
            		vm.techFoulCount(vm.techFoulCount() + 1);
            		this.techFoulClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotMode = 1;
            		e.robotEventType = 13;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.oops = function()
            	{
            		this.clear();
            		this.oopsClicked(true);
            		scouterDataService.undo(@Model.Scouter_Id).done(function (data)
            		{
            			vm.updateCounter();
            		}).fail(function (data)
            		{
            			var what = 3;
            		});
            	}
            	this.updateCounter = function()
            	{
            		scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
            		{
            			vm.highHotCount(data.HighHotCount);
            			vm.highCount(data.HighCount);
            			vm.highMissedCount(data.HighMissedCount);
            			vm.lowHotCount(data.LowHotCount);
            			vm.lowCount(data.LowCount);
            			vm.lowMissedCount(data.LowMissedCount);
            			vm.blockedCount(data.BlockedCount);
            			vm.foulCount(data.FoulCount);
            			vm.techFoulCount(data.TechFoulCount);
            		})
            	}

            	this.nav = function ()
            	{
            		document.location = '/Scouting/Teleop/@Model.Scouter_Id';
            	}

            	if (this.model.scoutID() < 4)
            	{
            		this.color = 'red';
            		this.clickColor = 'pink';
            		this.colorAlt = '#FF4444';
            	}
            	else
            	{
            		this.color = 'deepskyblue';
            		this.clickColor = 'lightblue';
            		this.colorAlt = 'skyblue';
            	}

            	var d = new ScoutInfo();
            	d.scouter = this.model.scoutID;
            	d.scouterStatus = 1;
            	d.match_Id = this.model.matchID;
            	d.team_Id = this.model.teamID;

            	scouterDataService.updateScoutData(ko.toJS(d)).done(function (data)
            	{
            		vm.updateCounter();
            	});
            	
            }
            var vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
    </script>
}

<div class="row">
<span style="color:red">Autonomous</span> <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' + model.teamNumber() + ' ('+ model.teamName() + ')'"/>
</div>

<div class="row">
	<div data-bind="click: highShotHot, style: {backgroundColor: highHotClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Hot</span>
		<br />
		<span data-bind="text: highHotCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: highShot, style: {backgroundColor: highClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>High</span>
		<br />
		<span data-bind="text: highCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: highShotMissed, style: {backgroundColor: highMissedClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Missed</span>
		<br />
		<span data-bind="text: highMissedCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: autonMoved, style: {backgroundColor: autonMovedClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Moved</span>
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: goalieStart, style: {backgroundColor: goalieStartClicked() ? clickColor : color}" class="col-xs-4">
		<br />
		<br />
		<span>Goalie Start</span>
		<br />
		<br />
		<br />
	</div>
</div>
<div class="row">
	<div data-bind="click: lowShotHot, style: {backgroundColor: lowHotClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Hot</span>
		<br />
		<span data-bind="text: lowHotCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: lowShot, style: {backgroundColor: lowClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Low</span>
		<br />
		<span data-bind="text: lowCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: lowShotMissed, style: {backgroundColor: lowMissedClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Missed</span>
		<br />
		<span data-bind="text: lowMissedCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="style: {backgroundColor: color}" class="col-xs-2">
		<br />
		<br />
		<br />
		<br />
		<br />
	</div>
	<div data-bind="click: blocked, style: {backgroundColor: blockedClicked() ? clickColor : colorAlt}" class="col-xs-4">
		<br />
		<br />
		<span>Blocked</span>
		<br />
		<span data-bind="text: blockedCount()"></span>
		<br />
		<br />
	</div>
</div>
<div class="row">
	<div class="col-xs-6">
	</div>
	<div data-bind="click: foul, style: {backgroundColor: foulClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Foul</span>
		<br />
		<span data-bind="text: foulCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: techFoul, style: {backgroundColor: techFoulClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Tech Foul</span>
		<br />
		<span data-bind="text: techFoulCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Oops</span>
		<br />
		<br />
		<br />
	</div>
</div>
<div class="row">
	<div data-bind="click: nav, style: {backgroundColor: color}" class="col-xs-2">
		<br />
		<br />
		<span>Teleop</span>
		<br />
		<br />
		<br />
	</div>
</div>