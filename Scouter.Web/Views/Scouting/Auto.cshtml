@model Scouter.Web.ViewModels.ScoutViewModel

@{
    ViewBag.Title = "Autonomous Scouter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
    <script>
        var vm;
        var robotEventTypes = @Html.Raw(Model.RobotEventTypes);
        
        $(function ()
		{   
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}

		    var Event = function ()
			{
				this.id = 0;
				this.scouter_Id = 0;
				this.robotMode = 0;
				this.robotEventType = 0;
		    }

			var ScoutInfo = function()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}

			var ScoutNotes = function()
			{
				this.Notes = notes.value;
				this.Team_Id = vm.model.teamID;
				this.Match_Id = vm.model.matchID;
				this.Mode = 1;
			}
            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                var self = this;
                self.model = scout;

                //Add isClicked Booleans here/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.TotesStackedClicked = ko.observable(false);
                self.RightToteMovedClicked = ko.observable(false);
                self.CenterToteMovedClicked = ko.observable(false);
                self.LeftToteMovedClicked = ko.observable(false);
                //self.YellowTotesMovedToStepClicked = ko.observable(false);

                self.LeftContainerFromStepClicked = ko.observable(false);
                self.LeftCenterContainerFromStepClicked = ko.observable(false);
                self.RightCenterContainerFromStepClicked = ko.observable(false);
                self.RightContainerFromStepClicked = ko.observable(false);

                self.RightContainerMovedClicked = ko.observable(false);
                self.CenterContainerMovedClicked = ko.observable(false);
                self.LeftContainerMovedClicked = ko.observable(false);
                
                self.AutonomousMovedClicked = ko.observable(false); 
                self.NoAutonomousClicked = ko.observable(false);
                self.AutoAttemptClutterClicked = ko.observable(false); 
                self.AutoFoulClicked = ko.observable(false);

                self.oopsClicked = ko.observable(false);

                //Add Count integers here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	self.TotesStackedCount = ko.observable(false);
            	self.RightToteMovedCount = ko.observable(false);
            	self.CenterToteMovedCount = ko.observable(false);
            	self.LeftToteMovedCount = ko.observable(false);
            	//self.YellowTotesMovedToStepCount = ko.observable(0);

            	self.LeftContainerFromStepCount = ko.observable(false);
            	self.LeftCenterContainerFromStepCount = ko.observable(false);
            	self.RightCenterContainerFromStepCount = ko.observable(false);
            	self.RightContainerFromStepCount = ko.observable(false);

            	self.RightContainerMovedCount = ko.observable(false);
            	self.CenterContainerMovedCount = ko.observable(false);
            	self.LeftContainerMovedCount = ko.observable(false);

            	self.AutonomousMovedCount = ko.observable(false); 
            	self.NoAutonomousCount = ko.observable(false); 
            	self.AutoAttemptClutterCount = ko.observable(false); 
            	self.AutoFoulCount = ko.observable(0);

            	self.clear = function()
            	{
                    //Set all isClickd booleans to false here/////////////////////////////////////////////////////////////////////////////////////////////
            	    self.TotesStackedClicked(false);
            	    self.RightToteMovedClicked(false);
            	    self.CenterToteMovedClicked(false);
            	    self.LeftToteMovedClicked(false);

            	    self.LeftContainerFromStepClicked(false);
            	    self.LeftCenterContainerFromStepClicked(false);
            	    self.RightCenterContainerFromStepClicked(false);
            	    self.RightContainerFromStepClicked(false);

            	    self.RightContainerMovedClicked(false);
            	    self.CenterContainerMovedClicked(false);
            	    self.LeftContainerMovedClicked(false);
                    
            	    self.AutonomousMovedClicked(false); 
            	    self.NoAutonomousClicked(false); 
            	    self.AutoAttemptClutterClicked(false); 
            	    self.AutoFoulClicked(false);

            	    self.oopsClicked(false);
            	}

                //Add on clicked functions here///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	self.abstractButtonFunction = function(clicked, count, robotEv)
            	{
            	    //reset all buttons to original color and then set self button to clicked color
            	    self.clear(); 

            	    clicked(true);
            	    //add one to the count of clicks

            	    if (typeof(count()) == typeof(0)) {
            	        count(count() + 1);
            	    }
            	    else if (typeof(count()) == typeof(false)) {
            	        count(!count());
            	    }
            	    else {
                        // terrible 
                    }
            	    //Create a new robot event and set it's variables
            	    var e = new Event(); 
            	    e.scouter_Id = self.model.scoutID;
            	    e.robotMode = 1;
            	    e.robotEventType = robotEv;
            	    //Send the robot event to the server
            	    scouterDataService.save(ko.toJS(e));
            	}
                /*
            	self.AutonomousMoved = function()
            	{
            	    //send own event
            	    self.abstractButtonFunction(self.AutonomousMovedClicked, self.AutonomousMovedCount, robotEventTypes['AutonomousMoved']);

            	    //unclick NoAutonomous
            	    if(self.AutonomousCount()) {self.NoAutonomous(false);}
            	}
            	self.AutoAttempClutter = function()
            	{
            	    //send own event
            	    self.abstractButtonFunction(self.AutoAttempClutterClicked, self.AutoAttempClutterCount, robotEventTypes['AutoAttempClutter']);

            	    //unclick NoAutonomous
            	    if(self.AutoAttempClutterCount()) {self.NoAutonomous(false);}
            	}
            	self.NoAutonomous = function(goAhead)
            	{
                    if(goAhead)
                    {
                        self.NoAutonomousCount(false); //will switch to true
                    }
                    else
                    {
                        self.NoAutonomousCount(true);
                    }
           	        self.abstractButtonFunction(self.NoAutonomousClicked, self.NoAutonomousCount, robotEventTypes['NoAutonomous']);
            	}
                */
            	self.oops = function()
            	{
            	    self.clear();
            	    self.oopsClicked(true);
            	    scouterDataService.undo(@Model.Scouter_Id).done(function (data)
            	    {
            	        self.updateCounter();
            	    });
            	}

            	self.updateCounter = function()
            	{
            		scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
            		{
                        //set your counts to the server counts////////////////////////////////////////////////////////////////////////////////////////////
            		    self.TotesStackedCount(data.TotesStacked);
            		    self.RightToteMovedCount(data.RightToteMoved);
            		    self.CenterToteMovedCount(data.CenterToteMoved);
                        self.LeftToteMovedCount(data.LeftToteMoved);
                        
            		    self.LeftContainerFromStepCount(data.LeftContainerFromStep);
            		    self.LeftCenterContainerFromStepCount(data.LeftCenterContainerFromStep);
            		    self.RightCenterContainerFromStepCount(data.RightCenterContainerFromStep);
            		    self.RightContainerFromStepCount(data.RightContainerFromStep);

            		    self.RightContainerMovedCount(data.RightContainerMoved);
            		    self.CenterContainerMovedCount(data.CenterContainerMoved);
            		    self.LeftContainerMovedCount(data.LeftContainerMoved);
                        
            		    self.AutonomousMovedCount(data.AutonomousMoved);
            		    self.NoAutonomousCount(data.NoAutonomous);
            		    self.AutoAttemptClutterCount(data.AutoAttemptClutter);
            		    self.AutoFoulCount(data.Foul);
            		})
            	}

            	self.nav = function ()
            	{
            	    document.location = '/Scouting/Teleop/@Model.Scouter_Id';
            	}

                //set the colors for the buttons
            	if (self.model.scoutID() < 4)//red scouts
            	{
            		self.color = 'red';
            		self.clickColor = 'pink';
            		self.colorAlt = '#FF4444';
            	}
            	else//blue scouts
            	{
            		self.color = 'deepskyblue';
            		self.clickColor = 'lightblue';
            		self.colorAlt = 'skyblue';
            	}

                //tell the server that you are in autonomous
            	var d = new ScoutInfo();
            	d.scouter = self.model.scoutID;
            	d.scouterStatus = 1;
            	d.match_Id = self.model.matchID;
            	d.team_Id = self.model.teamID;

            	scouterDataService.updateScoutData(ko.toJS(d)).done(function (data)
            	{
            		self.updateCounter();
            	});
            	
            }

            //create the viewmodel and apply bindings
            vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
    </script>
}
<div class="row" style="color:white">
    <span style="color:red; background-color:rgba(0, 0, 0, 0.8)">Autonomous</span>
    <span style="font-size:16px; background-color:rgba(0, 0, 0, 0.8)" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' + model.teamNumber() + ' ('+ model.teamName() + ')'" />
</div>

<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Totes Moved -> Auto Zone <div id="totesImg"></div></span>
</div>
<div class="row" style="text-align:center">
    <!-- vm is where you should create the buttons for the row. the color should either be color or colorAlt(or any other colors you define)
         the class that I was using for the "small" buttons was col-xs-2 and col-xs-4 for the longer ones. One limitation of Bootstraps
         tables is that the rows can have a max of 12 columns -->
    <!-- data-bind="click: <your onClickeFunction>, style: {backgroundColor: <your isClickedBoolean>() ? clickColor : [color | colorAlt]} class="col-xs-2"-->
    <div onclick="vm.abstractButtonFunction(vm.RightToteMovedClicked, vm.RightToteMovedCount, robotEventTypes['RightToteMoved'])"
         style="border-style: solid; border-width: medium; border-color: white"
         data-bind="style: {backgroundColor: RightToteMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Right</span>
        <br />
        <span data-bind="text: RightToteMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.CenterToteMovedClicked, vm.CenterToteMovedCount, robotEventTypes['CenterToteMoved'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: CenterToteMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Center</span>
        <br />
        <span data-bind="text: CenterToteMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.LeftToteMovedClicked, vm.LeftToteMovedCount, robotEventTypes['LeftToteMoved'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: LeftToteMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Left</span>
        <br />
        <span data-bind="text: LeftToteMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.TotesStackedClicked, vm.TotesStackedCount, robotEventTypes['TotesStacked'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="style: {backgroundColor: TotesStackedClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <!--  Labels! -->
        <span>Made Tote Set ?</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: TotesStackedCount() ? 'Yes, all 3' : 'No'"></span>
        <br />
    </div>
</div>
<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Recycling Containers moved -> Auto Zone <div id="containerImg"></div></span>
</div>
<div class="row" style="text-align:center">
    <div onclick="vm.abstractButtonFunction(vm.RightContainerMovedClicked, vm.RightContainerMovedCount, robotEventTypes['RightContainerMoved'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: RightContainerMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Right</span>
        <br />
        <span data-bind="text: RightContainerMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.CenterContainerMovedClicked, vm.CenterContainerMovedCount, robotEventTypes['CenterContainerMoved'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: CenterContainerMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Center</span>
        <br />
        <span data-bind="text: CenterContainerMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.LeftContainerMovedClicked, vm.LeftContainerMovedCount, robotEventTypes['LeftContainerMoved'])" style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: LeftContainerMovedClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <span>Left</span>
        <br />
        <span data-bind="text: LeftContainerMovedCount() ? 'TAKEN' : 'NO'"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.AutoFoulClicked, vm.AutoFoulCount, robotEventTypes['Foul'])"
         style="border-style: solid; border-width: medium; border-color: green"
         data-bind="style: {backgroundColor: AutoFoulClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <span>Autonomous Fouls</span>
        <br />
        <span data-bind="text: AutoFoulCount()"></span>
        <br />
    </div>
</div>

<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Containers Taken From Step</span>
</div>
<div class="row" style="text-align:center">
    <div onclick="vm.abstractButtonFunction(vm.LeftContainerFromStepClicked, vm.LeftContainerFromStepCount, robotEventTypes['LeftContainerFromStep'])" data-bind="style: { backgroundColor: LeftContainerFromStepClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Left</span>
        <br />
        <span data-bind="text: (LeftContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.LeftCenterContainerFromStepClicked, vm.LeftCenterContainerFromStepCount, robotEventTypes['LeftCenterContainerFromStep'])" data-bind="style: { backgroundColor: LeftCenterContainerFromStepClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Center Left</span>
        <br />
        <span data-bind="text: (LeftCenterContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.RightCenterContainerFromStepClicked, vm.RightCenterContainerFromStepCount, robotEventTypes['RightCenterContainerFromStep'])" data-bind="style: { backgroundColor: RightCenterContainerFromStepClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Center Right</span>
        <br />
        <span data-bind="text: (RightCenterContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.RightContainerFromStepClicked, vm.RightContainerFromStepCount, robotEventTypes['RightContainerFromStep'])" data-bind="style: { backgroundColor: RightContainerFromStepClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Right</span>
        <br />
        <span data-bind="text: (RightContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
</div>
<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">At end of Autonomous...</span>
</div>
<div class="row">
    <div onclick="vm.abstractButtonFunction(vm.AutonomousMovedClicked, vm.AutonomousMovedCount, robotEventTypes['AutonomousMoved'])" style="border-style: solid; border-width: medium; border-color: white" 
         data-bind="style: {backgroundColor: AutonomousMovedClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <span>Robot finished in Auto Zone</span>
        <br />
        <span data-bind="text: (AutonomousMovedCount() ? 'Yes' : 'No')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.AutoAttemptClutterClicked, vm.AutoAttemptClutterCount, robotEventTypes['AutoAttemptClutter'])" style="border-style: solid; border-width: medium; border-color: white" 
         data-bind="style: {backgroundColor: AutoAttemptClutterClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <span>Cluttered the Field</span>
        <br />
        <span data-bind="text: (AutoAttemptClutterCount() ? 'Yes' : 'No')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.NoAutonomousClicked, vm.NoAutonomousCount, robotEventTypes['NoAutonomous'])" style="border-style: solid; border-width: medium; border-color: white"
         data-bind="style: {backgroundColor: NoAutonomousClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <span>No Autonomous Program</span>
        <br />
        <span data-bind="text: (NoAutonomousCount() ? 'Yes' : 'No')"></span>
        <br />
        <br />
    </div>
</div>
@*<div class="row">
        <span style="color:black; background-color:rgba(0, 0, 0, 0.8)">Moving on</span>
    </div>
    <div class="dropdown">
        <button data-toggle="dropdown" class="btn dropdown-toggle" id="dropdownMenu1" aria-expanded="true">
            MANDATORY Results of Autonomous
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
            <li role="presentation">
                <a>
                    <input type="checkbox" id="AutonomousMoved" autocomplete="off"
                           onclick="vm.abstractButtonFunction(vm.AutonomousMovedClicked, vm.AutonomousMovedCount, robotEventTypes['AutonomousMoved'])">
                    Robot moved into Auto Zone
                </a>
            </li>
            <li role="presentation">
                <a>
                    <input type="checkbox" id="AutoAttemptClutter" autocomplete="off"
                           onclick="vm.abstractButtonFunction(vm.AutoAttemptClutterClicked, vm.AutoAttemptClutterCount, robotEventTypes['AutoAttemptClutter'])">
                    Excessively cluttered the field
                </a>
            </li>
            <li role="presentation">
                <a>
                    <input type="checkbox" id="NoAutonomous" autocomplete="off"
                           onclick="vm.abstractButtonFunction(vm.NoAutonomousClicked, vm.NoAutonomousCount, robotEventTypes['NoAutonomous'])">
                    No Autonomous Program
                </a>
                @*data-bind="disabled:AutonomousMoved.selected
            </li>
        </ul>*@
<div class="row">
    <span style="color:black; background-color:rgba(0, 0, 0, 0.8)">Moving on</span>
</div>
<div class="row">
    <div data-bind="click: nav, style: {backgroundColor: color}" class="col-xs-2"
         style="border-style: solid; border-width: medium; border-color: purple">
        <br />
        <br />
        <span>Teleop</span>
        <br />
        <br />
        <br />
    </div>
    <div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : colorAlt}" class="col-xs-2"
         style="border-style: solid; border-width: medium; border-color: yellow">
        <br />
        <br />
        <span>Oops</span>
        <br />
        <br />
        <br />
    </div>
    @*<div id="arrow"></div>*@
</div>
<body>

</body>
