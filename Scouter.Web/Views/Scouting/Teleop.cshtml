@model Scouter.Web.ViewModels.ScoutViewModel

@{
	ViewBag.Title = "Teleop Scouter";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
	<script>
    var vm;
    var robotEventTypes = @Html.Raw(Model.RobotEventTypes);

        $(function ()
        {
            var Scout = function()
            {
                this.color = ko.observable(@Model.Color);
                this.matchID = ko.observable(@Model.Match.Id);
                this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
                this.teamID = ko.observable(@Model.Team.Id);
                this.teamName = ko.observable("@Model.Team.Name");
                this.teamNumber = ko.observable(@Model.Team.Number);
                this.scoutID = ko.observable(@Model.Scouter_Id);
            }
            var Event = function()
            {
                this.id = 0;
                this.scouter_Id = 0;
                this.robotMode = 0;
                this.robotEventType = 0;
            }
            var StackEvent = function()
            {
                this.id = 0;
                this.scouter_Id = 0;
                this.startingHeight = 0;
                this.NumTotesAdded = 0;
                this.IsContainerAdded = false;
                this.IsLitterAdded = false;
            }
            var ScoutInfo = function ()
            {
                this.scouter = 0;
                this.match_Id = 0;
                this.scouterStatus = 0;
                this.team_Id = 0;
            }

            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                var self = this;
                self.model = scout;

                //Add isClicked Booleans here/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.RightChutePickUpClicked = ko.observable(false);
                self.LeftChutePickUpClicked = ko.observable(false);
                self.GroundPickUpClicked = ko.observable(false);
                //self.DriveOverPlatformClicked = ko.observable(false);

                self.OrientContainerClicked = ko.observable(false);
                self.OrientToteClicked = ko.observable(false);
                self.ClearContainerClicked = ko.observable(false);
                self.ClearToteClicked = ko.observable(false);
                self.ClearLitterClicked = ko.observable(false);

                self.BulldozeLitterToLandfillClicked = ko.observable(false);
                self.TeleopFoulClicked = ko.observable(false);

                self.LeftContainerFromStepClicked = ko.observable(false);
                self.LeftCenterContainerFromStepClicked = ko.observable(false);
                self.RightCenterContainerFromStepClicked = ko.observable(false);
                self.RightContainerFromStepClicked = ko.observable(false);

                self.InitialStackHeightClicked = ko.observable(false);
                self.TotesAddedToStackClicked = ko.observable(false);
                self.ContainerAddedToStackClicked = ko.observable(false);
                self.LitterAddedToStackClicked = ko.observable(false);
                self.SendButtonClicked = ko.observable(false);
                self.UndoStackButtonClicked = ko.observable(false);

                self.oopsClicked = ko.observable(false);
                self.unusedClicked = ko.observable(false);

                self.color = ko.observable('green');
                self.clickColor = ko.observable('yellow');
                self.colorAlt = ko.observable('blue');

                //Add Count integers here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.RightChutePickUpCount = ko.observable(0);
                self.LeftChutePickUpCount = ko.observable(0);
                self.GroundPickUpCount = ko.observable(0);

                self.OrientContainerCount = ko.observable(0);
                self.OrientToteCount = ko.observable(0);
                self.ClearContainerCount = ko.observable(0);
                self.ClearToteCount = ko.observable(0);
                self.ClearLitterCount = ko.observable(0);

                self.BulldozeLitterToLandfillCount = ko.observable(0);
                self.TeleopFoulCount = ko.observable(0);

                self.LeftContainerFromStepCount = ko.observable(false);
                self.LeftCenterContainerFromStepCount = ko.observable(false);
                self.RightCenterContainerFromStepCount = ko.observable(false);
                self.RightContainerFromStepCount = ko.observable(false);

                self.InitialStackHeightCount = ko.observable(0);
                self.TotesAddedToStackCount = ko.observable(0);
                self.ContainerAddedToStackCount = ko.observable(false);
                self.LitterAddedToStackCount = ko.observable(false);

                self.CoopertitionToteOneCount = ko.observable(false);
                self.CoopertitionToteTwoCount = ko.observable(false);
                self.CoopertitionToteThreeCount = ko.observable(false);
                self.CoopertitionToteFourCount = ko.observable(false);

                self.clear = function()
                {
                    //Set all isClickd booleans to false here/////////////////////////////////////////////////////////////////////////////////////////////
                    self.RightChutePickUpClicked(false);
                    self.LeftChutePickUpClicked(false);
                    self.GroundPickUpClicked(false);

                    self.OrientContainerClicked(false);
                    self.OrientToteClicked(false);
                    self.ClearContainerClicked(false);
                    self.ClearToteClicked(false);
                    self.ClearLitterClicked(false);

                    self.BulldozeLitterToLandfillClicked(false);
                    self.TeleopFoulClicked(false);

                    self.LeftContainerFromStepClicked(false);
                    self.LeftCenterContainerFromStepClicked(false);
                    self.RightCenterContainerFromStepClicked(false);
                    self.RightContainerFromStepClicked(false);

                    self.InitialStackHeightClicked(false);
                    self.TotesAddedToStackClicked(false);
                    self.ContainerAddedToStackClicked(false);
                    self.LitterAddedToStackClicked(false);
                    self.SendButtonClicked(false);
                    self.UndoStackButtonClicked(false);

                    self.oopsClicked(false);
                    self.unusedClicked(false);

                }

                //Add on clicked functions here///////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.abstractButtonFunction = function(clicked, count, robotEv)
                {
                    //reset all buttons to original color and then set this button to clicked color
                    self.clear();
                    clicked(true);
                    //add one to the count of clicks
                    if (typeof(count()) == typeof(0))
                    {
                        count(count() + 1);
                    }
                    else if (typeof(count()) == typeof(false))
                    {
                        count(!count());
                    }
                    else {/* terrible*/}
                    //Create a new robot event and set it's variables
                    var e = new Event();
                    e.scouter_Id = self.model.scoutID;
                    e.robotMode = 0;
                    e.robotEventType = robotEv;
                    //Send the robot event to the server
                    scouterDataService.save(ko.toJS(e));
                }

                self.InitialStackHeight = function()
                {
                    self.clear();
                    self.InitialStackHeightClicked(true);
                    if(self.InitialStackHeightCount() >= 5)
                    {
                        self.InitialStackHeightCount(0);
                    }
                    else
                        self.InitialStackHeightCount(self.InitialStackHeightCount() + 1);
                }
                self.TotesAddedToStack = function()
                {
                    self.clear();
                    self.TotesAddedToStackClicked(true);
                    if(self.TotesAddedToStackCount() >= 6)
                    {
                        self.TotesAddedToStackCount(0);
                    }
                    else{
                        self.TotesAddedToStackCount(self.TotesAddedToStackCount() + 1);
                        
                    }
                }
                self.ContainerAddedToStack = function()
                {
                    self.clear();
                    self.ContainerAddedToStackClicked(true);
                    self.ContainerAddedToStackCount(!self.ContainerAddedToStackCount());
                }
                self.LitterAddedToStack = function()
                {
                    if(self.ContainerAddedToStackCount()==true)
                    {
                        self.clear();
                        self.LitterAddedToStackClicked(true);
                        self.LitterAddedToStackCount(!self.LitterAddedToStackCount());
                    }
                    else {/*do nothing*/}                    
                }
                self.SendButton = function()
                {
                    if(self.SendToDBEnabled())
                    {
                        self.clear();
            	        
                        var e = new StackEvent();
                        e.scouter_Id = self.model.scoutID;
                        e.startingHeight = self.InitialStackHeightCount();
                        e.NumTotesAdded = self.TotesAddedToStackCount();
                        e.IsContainerAdded = self.ContainerAddedToStackCount();
                        e.IsLitterAdded = self.LitterAddedToStackCount();
                        scouterDataService.saveStack(ko.toJS(e)).done( function(){
                            self.SendButtonClicked(true);
                        });

                        self.InitialStackHeightCount(0);
                        self.TotesAddedToStackCount(0);
                        self.ContainerAddedToStackCount(false);
                        self.LitterAddedToStackCount(false);
                    }
                    else {/*do nothing*/}                    
                }
                self.UndoStackButton = function()
                {
                    self.clear();
                    scouterDataService.undoStack(@Model.Scouter_Id).done( function(){
                        self.UndoStackButtonClicked(true);            	        
                    });
                }
                self.SendToDBEnabled = function()
                {
                    if(self.TotesAddedToStackCount() + self.InitialStackHeightCount() <= 8 && 
                      (self.TotesAddedToStackCount() + (self.ContainerAddedToStackCount() ? 1:0) > 0))
                        return true;
                    else
                        return false;
                }
                    
                self.oops = function()
                {
                    self.clear();
                    self.oopsClicked(true);
                    scouterDataService.undo(@Model.Scouter_Id).done(function (data)
                    {
                        self.updateCounter();
                    });
                }

                    self.updateCounter = function()
                    {
                        scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
                        {
                            self.RightChutePickUpCount(data.RightChutePickUp);
                            self.LeftChutePickUpCount(data.LeftChutePickUp);
                            self.GroundPickUpCount(data.GroundPickUp);
                            
                            self.OrientContainerCount(data.OrientContainer);
                            self.OrientToteCount(data.OrientTote);
                            self.ClearContainerCount(data.ClearContainer);
                            self.ClearToteCount(data.ClearTote);
                            self.ClearLitterCount(data.ClearLitter);

                            self.BulldozeLitterToLandfillCount(data.BulldozeLitterToLandfill);
                            self.TeleopFoulCount(data.Foul);
                            
                            self.LeftContainerFromStepCount(data.LeftContainerFromStep);
                            self.LeftCenterContainerFromStepCount(data.LeftCenterContainerFromStep);
                            self.RightCenterContainerFromStepCount(data.RightCenterContainerFromStep);
                            self.RightContainerFromStepCount(data.RightContainerFromStep);

                            self.CoopertitionToteOneCount(data.CoopertitionToteOne);
                            self.CoopertitionToteTwoCount(data.CoopertitionToteTwo);
                            self.CoopertitionToteThreeCount(data.CoopertitionToteThree);
                            self.CoopertitionToteFourCount(data.CoopertitionToteFour);
                            
                        })
                    }
                    self.nav = function()
                    {
                        document.location = '/scouting/Notes/@Model.Scouter_Id';

                        /*
                        var x = document.getElementById("CheckboxCoopertitionToteOne");
                        if(x.checked == true)
                        {
                            var e = new Event();
                            e.scouter_Id = self.model.scoutID;
                            e.robotMode = 0;
                            e.robotEventType = robotEventTypes['CoopertitionToteOne'];
                            scouterDataService.save(ko.toJS(e));
                        }
                        
                        x = document.getElementById("CheckboxCoopertitionToteTwo");
                        if(x.checked == true)
                        {
                            var e = new Event();
                            e.scouter_Id = self.model.scoutID;
                            e.robotMode = 0;
                            e.robotEventType = robotEventTypes['CoopertitionToteTwo'];
                            scouterDataService.save(ko.toJS(e));
                        }
                        x = document.getElementById("CheckboxCoopertitionToteThree");
                        if(x.checked == true)
                        {
                            var e = new Event();
                            e.scouter_Id = self.model.scoutID;
                            e.robotMode = 0;
                            e.robotEventType = robotEventTypes['CoopertitionToteThree'];
                            scouterDataService.save(ko.toJS(e));
                        }
                        x = document.getElementById("CheckboxCoopertitionToteFour");
                        if(x.checked == true)
                        {
                            var e = new Event();
                            e.scouter_Id = self.model.scoutID;
                            e.robotMode = 0;
                            e.robotEventType = robotEventTypes['CoopertitionToteFour'];
                            scouterDataService.save(ko.toJS(e));
                        }
                        */
                    }
                    
                    if (self.model.scoutID() < 4)
                    {
                        self.color('red');
                        self.clickColor('pink');
                        self.colorAlt('#FF4444');
                    }
                    else
                    {
                        self.color('deepskyblue');
                        self.clickColor('lightcyan');
                        self.colorAlt('skyblue');
                    }

                    var d = new ScoutInfo();
                    d.scouter = self.model.scoutID;
                    d.scouterStatus = 2;
                    d.match_Id = self.model.matchID;
                    d.team_Id = self.model.teamID;

                    scouterDataService.updateScoutData(ko.toJS(d)).done(function(data)
                    {
                        self.updateCounter();
                    });
                
            }
            vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
	</script>
}

<div class="row" style="color:white">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Teleoperated <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' +model.teamNumber() + ' ('+ model.teamName() + ')'" /></span>
</div>
<div class="row" style="color:white">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Stacks Made</span>
</div>
<div class="row" style="text-align:center">
    <div onclick="vm.InitialStackHeight()" data-bind="style: { backgroundColor: InitialStackHeightClicked() ? clickColor : 'darkorange' }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Starting Height</span>
        <br />
        <span data-bind="text: InitialStackHeightCount"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.TotesAddedToStack()" data-bind="    style: { backgroundColor: TotesAddedToStackClicked() ? clickColor : 'darkorange' }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span># Totes Added this Time</span>
        <br />
        <span data-bind="text: TotesAddedToStackCount"></span>
        <br />
    </div>
    <div onclick="vm.ContainerAddedToStack()" data-bind="style: { backgroundColor: ContainerAddedToStackClicked() ? clickColor : 'darkorange' }"
         style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Is Container placed on Top?</span>
        <br />
        <span data-bind="text: (ContainerAddedToStackCount() ? 'Yes' : 'No')"></span>
        <br />
    </div>
    <div onclick="vm.LitterAddedToStack()" data-bind="style: {backgroundColor: ContainerAddedToStackCount() ? (LitterAddedToStackClicked() ? clickColor : 'darkorange') : 'lemonchiffon' }"
         style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Is Litter in Container?</span>
        <br />
        <span data-bind="text: (LitterAddedToStackCount() ? 'Yes' : 'No')"></span>
        <br />
    </div>
    <div onclick="vm.SendButton()" data-bind="style:{backgroundColor: SendToDBEnabled() ? (SendButtonClicked() ? 'green' : 'darkorange') : 'lemonchiffon' }"
         style="padding-left:1px; border-style: solid; border-width: medium; border-color: white" class="col-xs-1">
        <br />
        <span>Send</span>
        <br />
        <br />
    </div>
    <div onclick="vm.UndoStackButton()" data-bind="style: { backgroundColor: UndoStackButtonClicked() ? 'green' : 'darkorange' }"
         style="padding-left:1px; border-style: solid; border-width: medium; border-color: white" class="col-xs-1">
        <br />
        <span>Undo</span>
        <br />
        <br />
    </div>
</div>

<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Totes and Field</span>
</div>

<div class="row" style="text-align:center">
    <div onclick="vm.abstractButtonFunction(vm.LeftChutePickUpClicked, vm.LeftChutePickUpCount, robotEventTypes['LeftChutePickUp'])" 
         data-bind="style: { backgroundColor: LeftChutePickUpClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Left Chute PickUp </span>
        <br />
        <span data-bind="text: LeftChutePickUpCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.RightChutePickUpClicked, vm.RightChutePickUpCount, robotEventTypes['RightChutePickUp'])" data-bind="    style: { backgroundColor: RightChutePickUpClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Right Chute PickUp </span>
        <br />
        <span data-bind="text: RightChutePickUpCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.GroundPickUpClicked, vm.GroundPickUpCount, robotEventTypes['GroundPickUp'])" 
         data-bind="    style: {backgroundColor: GroundPickUpClicked() ? clickColor : color}" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Ground PickUp</span>
        <br />
        <span data-bind="text: GroundPickUpCount()"></span>
        <br />
        <br />
    </div>
    @*<div onclick="vm.abstractButtonFunction(vm.BulldozeLitterToLandfillClicked, vm.BulldozeLitterToLandfillCount, robotEventTypes['BulldozeLitterToLandfill'])" 
         data-bind="style: { backgroundColor: BulldozeLitterToLandfillClicked() ? clickColor : colorAlt }" 
         style="margin-left:3px; border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Litter Moved to Landfill</span>
        <br />
        <span data-bind="text: BulldozeLitterToLandfillCount()"></span>
        <br />
        <br />
    </div>*@
    <div onclick="vm.abstractButtonFunction(vm.TeleopFoulClicked, vm.TeleopFoulCount, robotEventTypes['Foul'])"
         data-bind="style: { backgroundColor: TeleopFoulClicked() ? clickColor : color }" style="margin-left:3px; border-style: solid; border-width: medium; border-color: green" class="col-xs-2">
        <br />
        <span>Teleop FOULS</span>
        <br />
        <br />
        <span data-bind="text: TeleopFoulCount()"></span>
        <br />
    </div>
</div>

<div class="row" style="color:white">
    Assists
</div>

<div class="row" style="text-align:center">
        <div onclick="vm.abstractButtonFunction(vm.OrientContainerClicked, vm.OrientContainerCount, robotEventTypes['OrientContainer'])" data-bind="style: { backgroundColor: OrientContainerClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
            <br />
            <span>Orient Container</span>
            <br />
            <span data-bind="text: OrientContainerCount()"></span>
            <br />
        </div>
        <div onclick="vm.abstractButtonFunction(vm.OrientToteClicked, vm.OrientToteCount, robotEventTypes['OrientTote'])" data-bind="style: { backgroundColor: OrientToteClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
            <br />
            <span>Orient Tote </span>
            <br />
            <br />
            <span data-bind="text: OrientToteCount()"></span>
            <br />
        </div>
        <div onclick="vm.abstractButtonFunction(vm.ClearContainerClicked, vm.ClearContainerCount, robotEventTypes['ClearContainer'])" data-bind="    style: { backgroundColor: ClearContainerClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
            <br />
            <span>Clear away Container</span>
            <br />
            <span data-bind="text: ClearContainerCount()"></span>
            <br />
        </div>
        <div onclick="vm.abstractButtonFunction(vm.ClearToteClicked, vm.ClearToteCount, robotEventTypes['ClearTote'])" data-bind="    style: { backgroundColor: ClearToteClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
            <br />
            <span>Clear away Tote</span>
            <br />
            <span data-bind="text: ClearToteCount()"></span>
            <br />
        </div>
        <div onclick="vm.abstractButtonFunction(vm.ClearLitterClicked, vm.ClearLitterCount, robotEventTypes['ClearLitter'])" data-bind="style: { backgroundColor: ClearLitterClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
            <br />
            <span>Clear away litter</span>
            <br />
            <span data-bind="text: ClearLitterCount()"></span>
        </div>
</div>

<div class="row">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Containers Taken From Step</span>
</div>
<div class="row" style="text-align:center">
    <div onclick="vm.abstractButtonFunction(vm.LeftContainerFromStepClicked, vm.LeftContainerFromStepCount, robotEventTypes['LeftContainerFromStep'])"
         data-bind="style: { backgroundColor: LeftContainerFromStepClicked() ? clickColor : (LeftContainerFromStepCount() ? 'palegreen' : color) }"
         style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Left</span>
        <br />
        <span data-bind="text: (LeftContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.LeftCenterContainerFromStepClicked, vm.LeftCenterContainerFromStepCount, robotEventTypes['LeftCenterContainerFromStep'])"
         data-bind="style: { backgroundColor: LeftCenterContainerFromStepClicked() ? clickColor : (LeftCenterContainerFromStepCount() ? 'palegreen' : color) }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Center Left</span>
        <br />
        <span data-bind="text: (LeftCenterContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.RightCenterContainerFromStepClicked, vm.RightCenterContainerFromStepCount, robotEventTypes['RightCenterContainerFromStep'])"
         data-bind="style: { backgroundColor: RightCenterContainerFromStepClicked() ? clickColor : (RightCenterContainerFromStepCount() ? 'palegreen' : color) }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Center Right</span>
        <br />
        <span data-bind="text: (RightCenterContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.RightContainerFromStepClicked, vm.RightContainerFromStepCount, robotEventTypes['RightContainerFromStep'])"
         data-bind="style: { backgroundColor: RightContainerFromStepClicked() ? clickColor : (RightContainerFromStepCount() ? 'palegreen' : color) }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <span>Right</span>
        <br />
        <span data-bind="text: (RightContainerFromStepCount() ? 'TAKEN' : 'NO')"></span>
        <br />
        <br />
    </div>
</div>

<div class="row">
    <span style="color:black; background-color:rgba(0, 0, 0, 0.8)">Moving on</span>
</div>
<div class="dropdown">
    <button data-toggle="dropdown" class="btn dropdown-toggle" id="dropdownMenu1" aria-expanded="true">
        Coopertition Totes Added <br/> (stacked from bottom up)
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1" style="text-align:center">
        <li role="presentation">
            <a data-bind="style: {backgroundColor: CoopertitionToteOneCount() ? 'palegreen' : 'white' }"
               onclick="vm.abstractButtonFunction(vm.unusedClicked, vm.CoopertitionToteOneCount, robotEventTypes['CoopertitionToteOne'])">
                1
            </a>
        </li>
        <li role="presentation">
            <a data-bind="style: {backgroundColor: CoopertitionToteTwoCount() ? 'palegreen' : 'white' }"
               onclick="vm.abstractButtonFunction(vm.unusedClicked, vm.CoopertitionToteTwoCount, robotEventTypes['CoopertitionToteTwo'])">
                2
            </a>
        </li>
        <li role="presentation">
            <a data-bind="style: {backgroundColor: CoopertitionToteThreeCount() ? 'palegreen' : 'white' }"
               onclick="vm.abstractButtonFunction(vm.unusedClicked, vm.CoopertitionToteThreeCount, robotEventTypes['CoopertitionToteThree'])">
                3
            </a>
        </li>
        <li role="presentation">
            <a data-bind="style: {backgroundColor: CoopertitionToteFourCount() ? 'palegreen' : 'white' }"
               onclick="vm.abstractButtonFunction(vm.unusedClicked, vm.CoopertitionToteFourCount, robotEventTypes['CoopertitionToteFour'])">
                4
            </a>
        </li>
    </ul>
</div>

<div class="row">
    <span style="color:black; background-color:rgba(0, 0, 0, 0.8)">Moving on</span>
</div>

<div class="row">
    <div data-bind="click: nav, style: {backgroundColor: colorAlt}" class="col-xs-2"
         style="border-style: solid; border-width: medium; border-color: purple">
        <br />
        <span>Notes</span>
        <br />
        <br />
        <br />
    </div>
    <div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : color}" class="col-xs-2"
         style="border-style: solid; border-width: medium; border-color: yellow">
        <br />
        <span>Oops</span>
        <br />
        <br />
        <br />
    </div>

</div>
