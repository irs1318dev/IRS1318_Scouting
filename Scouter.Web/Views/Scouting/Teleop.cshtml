@model Scouter.Web.ViewModels.ScoutViewModel

@{
	ViewBag.Title = "Teleop Scouter: " + Model.Scouter_Id;
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
	<script>
		$(function ()
		{
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}
			var Event = function()
			{
				this.id = 0;
				this.scouter_Id = 0;
				this.robotMode = 0;
				this.robotEventType = 0;
				this.goalWasHot = false;
			}
			var ScoutInfo = function ()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}

            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
            	this.model = scout;
            	this.highClicked = ko.observable(false);
            	this.highMissedClicked = ko.observable(false);
            	this.passClicked = ko.observable(false);
            	this.blockedPassClicked = ko.observable(false);
            	this.blockedRobotClicked = ko.observable(false);
            	this.lowClicked = ko.observable(false);
            	this.lowMissedClicked = ko.observable(false);
            	this.trussClicked = ko.observable(false);
            	this.catchClicked = ko.observable(false);
            	this.blockedShotClicked = ko.observable(false);
            	this.foulClicked = ko.observable(false);
            	this.techFoulClicked = ko.observable(false);
            	this.oopsClicked = ko.observable(false);
            	this.showWait = ko.observable(false);
            	this.inboundClicked = ko.observable(false);
            	this.missedInboundClicked = ko.observable(false);
            	this.lostBallClicked = ko.observable(false);

            	this.highCount = ko.observable(0);
            	this.highMissedCount = ko.observable(0);
            	this.lowCount = ko.observable(0);
            	this.lowMissedCount = ko.observable(0);
            	this.blockedPassCount = ko.observable(0);
            	this.blockedShotCount = ko.observable(0);
            	this.blockedRobotCount = ko.observable(0);
            	this.passCount = ko.observable(0);
            	this.trussCount = ko.observable(0);
            	this.catchCount = ko.observable(0);
            	this.foulCount = ko.observable(0);
            	this.techFoulCount = ko.observable(0);
            	this.inboundCount = ko.observable(0);
            	this.missedInboundCount = ko.observable(0);
            	this.lostBallCount = ko.observable(0);

            	this.clear = function()
            	{
            		vm.highClicked(false);
            		vm.highMissedClicked(false);
            		vm.passClicked(false);
            		vm.blockedPassClicked(false);
            		vm.blockedRobotClicked(false);
            		vm.lowClicked(false);
            		vm.lowMissedClicked(false);
            		vm.trussClicked(false);
            		vm.catchClicked(false);
            		vm.foulClicked(false);
            		vm.techFoulClicked(false);
            		vm.blockedShotClicked(false);
            		vm.oopsClicked(false);
            		vm.inboundClicked(false);
            		vm.missedInboundClicked(false);
            		vm.lostBallClicked(false);
            	}

            	this.highShot = function()
            	{
            		this.clear();
            		vm.highCount(vm.highCount() + 1);
            		this.highClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 2;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.highShotMissed = function()
            	{
            		this.clear();
            		vm.highMissedCount(vm.highMissedCount() + 1);
            		this.highMissedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 4;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.pass = function()
            	{
            		this.clear();
            		vm.passCount(vm.passCount() + 1);
            		this.passClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 5;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.blockedPass = function()
            	{
            		this.clear();
            		vm.blockedPassCount(vm.blockedPassCount() + 1);
            		this.blockedPassClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 10;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.blockedRobot = function()
            	{
            		this.clear();
            		vm.blockedRobotCount(vm.blockedRobotCount() + 1);
            		this.blockedRobotClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 11;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lowShot = function()
            	{
            		this.clear();
            		vm.lowCount(vm.lowCount() + 1);
            		this.lowClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 1;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lowShotMissed = function()
            	{
            		this.clear();
            		vm.lowMissedCount(vm.lowMissedCount() + 1);
            		this.lowMissedClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 3;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.truss = function()
            	{
            		this.clear();
            		vm.trussCount(vm.trussCount() + 1);
            		this.trussClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 7;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.caught = function()
            	{
            		this.clear();
            		vm.catchCount(vm.catchCount() + 1);
            		this.catchClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 6;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.blockedShot = function()
            	{
            		this.clear();
            		vm.blockedShotCount(vm.blockedShotCount() + 1);
            		this.blockedShotClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 9;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.foul = function()
            	{
            		this.clear();
            		vm.foulCount(vm.foulCount() + 1);
            		this.foulClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 12;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.techFoul = function()
            	{
            		this.clear();
            		vm.techFoulCount(vm.techFoulCount() + 1);
            		this.techFoulClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 13;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.inbound = function()
            	{
            		this.clear()
            		vm.inboundCount(vm.inboundCount() + 1);
            		this.inboundClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 14;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.missedInbound = function ()
            	{
            		this.clear()
            		vm.missedInboundCount(vm.missedInboundCount() + 1);
            		this.missedInboundClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 15;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.lostBall = function ()
            	{
            		this.clear()
            		vm.lostBallCount(vm.lostBallCount() + 1);
            		this.lostBallClicked(true);
            		var e = new Event();
            		e.scouter_Id = this.model.scoutID;
            		e.robotEventType = 16;
            		scouterDataService.save(ko.toJS(e));
            	}
            	this.oops = function()
            	{
            		this.clear();
            		this.oopsClicked(true);
            		scouterDataService.undo(@Model.Scouter_Id).done(function (data)
            		{
            			vm.updateCounter();
            		}).fail(function (data)
            		{
            			var what = 3;
            		});
            	}
            	this.updateCounter = function()
            	{
            		scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
            		{
            			vm.highCount(data.HighCount);
            			vm.highMissedCount(data.HighMissedCount);
            			vm.lowCount(data.LowCount);
            			vm.lowMissedCount(data.LowMissedCount);
            			vm.blockedPassCount(data.BlockedPassCount);
            			vm.blockedShotCount(data.BlockedShotCount);
            			vm.blockedRobotCount(data.BlockedRobotCount);
            			vm.passCount(data.PassCount);
            			vm.trussCount(data.TrussCount);
            			vm.catchCount(data.CatchCount);
            			vm.foulCount(data.FoulCount);
            			vm.techFoulCount(data.TechFoulCount);
            			vm.inboundCount(data.InboundCount);
            			vm.missedInboundCount(data.MissedInboundCount);
            			vm.lostBallCount(data.LostBallCount);
            		})
            	}

            	this.nav = function()
            	{
            		document.location = '/scouting/Notes/@Model.Scouter_Id';
            	}

            	if (this.model.scoutID() < 4)
            	{
            		this.color = 'red';
            		this.clickColor = 'pink';
            		this.colorAlt = '#FF4444';
            	}
            	else
            	{
            		this.color = 'deepskyblue';
            		this.clickColor = 'lightcyan';
            		this.colorAlt = 'skyblue';
            	}

            	var d = new ScoutInfo();
            	d.scouter = this.model.scoutID;
            	d.scouterStatus = 2;
            	d.match_Id = this.model.matchID;
            	d.team_Id = this.model.teamID;

            	scouterDataService.updateScoutData(ko.toJS(d)).done(function(data)
            	{
            		vm.updateCounter();
            	});
            }
            var vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
	</script>
}

<div class="row">
	Teleoperated <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' +model.teamNumber() + ' ('+ model.teamName() + ')'" />
</div>

<div class="row panel-collapse collapse in" id="row1">
	<div data-bind="click: highShot, style: {backgroundColor: highClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>High</span>
		<br />
		<span data-bind="text: highCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: highShotMissed, style: {backgroundColor: highMissedClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Missed</span>
		<br />
		<span data-bind="text: highMissedCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: pass, style: {backgroundColor: passClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Pass</span>
		<br />
		<span data-bind="text: passCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: blockedPass, style: {backgroundColor: blockedPassClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Blocked Pass</span>
		<br />
		<span data-bind="text: blockedPassCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: blockedRobot, style: {backgroundColor: blockedRobotClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Blocked Robot</span>
		<br />
		<span data-bind="text: blockedRobotCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: blockedShot, style: {backgroundColor: blockedShotClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Blocked Shot</span>
		<br />
		<span data-bind="text: blockedShotCount()"></span>
		<br />
		<br />
	</div>
</div>
<div class="row panel-collapse collapse in" id="row2">
	<div data-bind="click: lowShot, style: {backgroundColor: lowClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Low</span>
		<br />
		<span data-bind="text: lowCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: lowShotMissed, style: {backgroundColor: lowMissedClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Missed</span>
		<br />
		<span data-bind="text: lowMissedCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: truss, style: {backgroundColor: trussClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Truss</span>
		<br />
		<span data-bind="text: trussCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: caught, style: {backgroundColor: catchClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Catch</span>
		<br />
		<span data-bind="text: catchCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: inbound, style: {backgroundColor: inboundClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Inbound</span>
		<br />
		<span data-bind="text: inboundCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: missedInbound, style: {backgroundColor: missedInboundClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Missed Inbound</span>
		<br />
		<span data-bind="text: missedInboundCount()"></span>
		<br />
		<br />
	</div>
</div>
<div class="row panel-collapse collapse in" id="row3">
	<div data-bind="click: lostBall, style: {backgroundColor: lostBallClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Lost Ball</span>
		<br />
		<span data-bind="text: lostBallCount()"></span>
		<br />
		<br />
	</div>
	<div class="col-xs-4">
	</div>
	<div data-bind="click: foul, style: {backgroundColor: foulClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Foul</span>
		<br />
		<span data-bind="text: foulCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: techFoul, style: {backgroundColor: techFoulClicked() ? clickColor : color}" class="col-xs-2">
		<br />
		<br />
		<span>Tech Foul</span>
		<br />
		<span data-bind="text: techFoulCount()"></span>
		<br />
		<br />
	</div>
	<div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : colorAlt}" class="col-xs-2">
		<br />
		<br />
		<span>Oops</span>
		<br />
		<br />
		<br />
	</div>
</div>
<div class="row">
	<div data-bind="click: nav, style: {backgroundColor: colorAlt}"class="col-xs-2">
		<br />
		<br />
		<span>Notes</span>
		<br />
		<br />
		<br />
	</div>
</div>