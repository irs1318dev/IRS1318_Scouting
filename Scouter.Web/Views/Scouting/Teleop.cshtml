@model Scouter.Web.ViewModels.ScoutViewModel

@{
	ViewBag.Title = "Teleop Scouter: " + Model.Scouter_Id;
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
	<script>
        var vm;
        var robotEventTypes = @Html.Raw(Model.RobotEventTypes);

		$(function ()
		{
			var Scout = function()
			{
				this.color = ko.observable(@Model.Color);
				this.matchID = ko.observable(@Model.Match.Id);
				this.matchNumber = ko.observable(@Model.Match.SequenceNumber);
				this.teamID = ko.observable(@Model.Team.Id);
				this.teamName = ko.observable("@Model.Team.Name");
				this.teamNumber = ko.observable(@Model.Team.Number);
				this.scoutID = ko.observable(@Model.Scouter_Id);
			}
			var Event = function()
			{
				this.id = 0;
				this.scouter_Id = 0;
				this.robotMode = 0;
				this.robotEventType = 0;
			}
			var ScoutInfo = function ()
			{
				this.scouter = 0;
				this.match_Id = 0;
				this.scouterStatus = 0;
				this.team_Id = 0;
			}

            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function (scout)
            {
                var self = this;
                self.model = scout;
                
                //Add isClicked Booleans here/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.ChutePickUpClicked = ko.observable(false);
                self.GroundPickUpClicked = ko.observable(false);
                self.DriveOverPlatformClicked = ko.observable(false);
                self.HumanPlayerShootsClicked = ko.observable(false);
                
                self.OrientContainerClicked = ko.observable(false);
                self.OrientToteClicked = ko.observable(false);
                self.ClearContainerClicked = ko.observable(false);
                self.ClearToteClicked = ko.observable(false);
                self.ClearLitterClicked = ko.observable(false);

                self.LitterPlacedAtHeightClicked = ko.observable(false);
                self.BulldozeLitterToLandfillClicked = ko.observable(false);
                self.TeleopFoulClicked = ko.observable(false);
                self.ContainersFromStepClicked = ko.observable(false);

                self.TotesPlacedOnExistingCoopertitionClicked = ko.observable(false);
                self.TotesPlacedOnExistingStackClicked = ko.observable(false);
                self.ContainerPlacedAtHeightClicked = ko.observable(false);

                //Add Count integers here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.ChutePickUpCount = ko.observable(0);
                self.GroundPickUpCount = ko.observable(0);
                self.DriveOverPlatformCount = ko.observable(0);
                self.HumanPlayerShootsCount = ko.observable(0);

                self.OrientContainerCount = ko.observable(0);
                self.OrientToteCount = ko.observable(0);
                self.ClearContainerCount = ko.observable(0);
                self.ClearToteCount = ko.observable(0);
                self.ClearLitterCount = ko.observable(0);

                self.LitterPlacedAtHeightCount = ko.observable(0);
                self.BulldozeLitterToLandfillCount = ko.observable(0);
                self.TeleopFoulCount = ko.observable(0);
                self.ContainersFromStepCount = ko.observable(0);

                self.TotesPlacedOnExistingCoopertitionCount = ko.observable(0);
                self.TotesPlacedOnExistingStackCount = ko.observable(0);
                self.ContainerPlacedAtHeightCount = ko.observable(0);

            	self.clear = function()
            	{
            	    //Set all isClickd booleans to false here/////////////////////////////////////////////////////////////////////////////////////////////
            	    self.ChutePickUpClicked(false);
            	    self.GroundPickUpClicked(false);
            	    self.DriveOverPlatformClicked(false);
            	    self.HumanPlayerShootsClicked(false);
                    
            	    self.OrientContainerClicked(false);
            	    self.OrientToteClicked(false);
            	    self.ClearContainerClicked(false);
            	    self.ClearToteClicked(false);
            	    self.ClearLitterClicked(false);

            	    self.LitterPlacedAtHeightClicked(false);
            	    self.BulldozeLitterToLandfillClicked(false);
            	    self.TeleopFoulClicked(false);
            	    self.ContainersFromStepClicked(false);
                    
            	    self.TotesPlacedOnExistingCoopertitionClicked(false);
            	    self.TotesPlacedOnExistingStackClicked(false);
            	    self.ContainerPlacedAtHeightClicked(false);
            	}

                //Add on clicked functions here///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	self.abstractButtonFunction = function(clicked, count, robotEv) {
            	    //reset all buttons to original color and then set this button to clicked color
            	    self.clear();
            	    clicked(true);
            	    //add one to the count of clicks
            	    count(count() + 1);
            	    //Create a new robot event and set it's variables
            	    var e = new Event();
            	    e.scouter_Id = self.model.ScoutID;
            	    e.robotMode = 0;
            	    e.robotEventType = robotEv;
            	    //Send the robot event to the server
            	    scouterDataService.save(ko.toJS(e));
            	}

                //this.TotesPlacedOnExistingCoopertition()
                //this.TotesPlacedOnExistingStack()
                //this. ContainerPlacedAtHeight

                //i can't implement the awkward arrays
                //nor did i fix the magic numbers

                //NEEDS TO BE FIXED AND ALSO ADDED TO AUTONOMOUS
            	self.oops = function()
            	{
            		this.clear();
            		this.oopsClicked(true);
            		scouterDataService.undo(@Model.Scouter_Id).done(function (data)
            		{
            			vm.updateCounter();
            		}).fail(function (data)
            		{
            			var what = 3;
            		});
            	}
            	self.updateCounter = function()
            	{
            		scouterDataService.updateCounter(@Model.Scouter_Id).done(function (data)
            		{
            		    self.ChutePickUpCount(data.ChutePickUp);
            			self.GroundPickUpCount(data.GroundPickUp);
            			self.DriveOverPlatformCount(data.DriveOverPlatform);
            			self.HumanPlayerShootsCount(data.HumanPlayerShoots);
                        
            			self.OrientContainerCount(data.OrientContainer);
            			self.OrientToteCount(data.OrientTote);
            			self.ClearContainerCount(data.ClearContainer);
            			self.ClearToteCount(data.ClearTote);
            			self.ClearLitterCount(data.ClearLitter);

            			self.LitterPlacedAtHeightCount(data.LitterPlacedAtHeight);
            			self.BulldozeLitterToLandfillCount(data.BulldozeLitterToLandfill);
            			self.TeleopFoulCount(data.TeleopFoul);
            			self.ContainersFromStepCount(data.ContainersFromStep);
                        
            			//self.TotesPlacedOnExistingCoopertitionCount(data.TotesPlacedOnExistingCoopertitionCount);
            			//self.TotesPlacedOnExistingStackCount(data.TotesPlacedOnExistingStackCount);
            			//self.ContainerPlacedAtHeightCount(data.ContainerPlacedAtHeightCount);

            		})
            	}
            	self.nav = function()
            	{
            		document.location = '/scouting/Notes/@Model.Scouter_Id';
            	}

            	if (self.model.scoutID() < 4)
            	{
            		self.color = 'red';
            		self.clickColor = 'pink';
            		self.colorAlt = '#FF4444';
            	}
            	else
            	{
            		self.color = 'deepskyblue';
            		self.clickColor = 'lightcyan';
            		self.colorAlt = 'skyblue';
            	}

            	var d = new ScoutInfo();
            	d.scouter = self.model.scoutID;
            	d.scouterStatus = 2;
            	d.match_Id = self.model.matchID;
            	d.team_Id = self.model.teamID;

            	scouterDataService.updateScoutData(ko.toJS(d)).done(function(data)
            	{
            		self.updateCounter();
            	});
            }
            vm = new ViewModel(new Scout());
            ko.applyBindings(vm);
        })
	</script>
}
<html class="flexbox teleopback">
<div class="row" style="color:white">
    Teleoperated <span style="font-size:16px" data-bind="text: ' Match: ' + model.matchNumber() + ' Team: ' +model.teamNumber() + ' ('+ model.teamName() + ')'" />
</div>

<div class="row" style="color:white">
    Interactions with Totes and Field Pieces
</div>

<div class="row">
    <div onclick="vm.abstractButtonFunction(vm.ChutePickUpClicked, vm.ChutePickUpCount, robotEventTypes['ChutePickUp'])" data-bind="    style: { backgroundColor: ChutePickUpClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Chute PickUp</span>
        <br />
        <span data-bind="text: ChutePickUpCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.GroundPickUpClicked, vm.GroundPickUpCount, robotEventTypes['GroundPickUp'])" data-bind="    style: {backgroundColor: GroundPickUpClicked() ? clickColor : colorAlt}" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Ground PickUp</span>
        <br />
        <span data-bind="text: GroundPickUpCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.DriveOverPlatformClicked, vm.DriveOverPlatformCount, robotEventTypes['DriveOverPlatform'])" data-bind="    style: {backgroundColor: DriveOverPlatformClicked() ? clickColor : color}" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Drove over Platform</span>
        <br />
        <span data-bind="text: DriveOverPlatformCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.HumanPlayerShootsClicked, vm.HumanPlayerShootsCount, robotEventTypes['HumanPlayerShoots'])" data-bind="    style: {backgroundColor: HumanPlayerShootsClicked() ? clickColor : colorAlt}" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Human threw litter over step</span>
        <br />
        <span data-bind="text: HumanPlayerShootsCount()"></span>
        <br />
        <br />
    </div>
</div>

<div class="row" style="color:white">
    Assisting others on the Platform
</div>

<div class="row">
    <div onclick="vm.abstractButtonFunction(vm.OrientContainerClicked, vm.OrientContainerCount, robotEventTypes['OrientContainer'])" data-bind="style: { backgroundColor: OrientContainerClicked() ? clickColor : colorAlt }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Orient Container</span>
        <br />
        <span data-bind="text: OrientContainerCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.OrientToteClicked, vm.OrientToteCount, robotEventTypes['OrientTote'])" data-bind="style: { backgroundColor: OrientToteClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Orient Tote</span>
        <br />
        <span data-bind="text: OrientToteCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.ClearContainerClicked, vm.ClearContainerCount, robotEventTypes['ClearContainer'])" data-bind="    style: { backgroundColor: ClearContainerClicked() ? clickColor : colorAlt }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Clear away Container</span>
        <br />
        <span data-bind="text: ClearContainerCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.ClearToteClicked, vm.ClearToteCount, robotEventTypes['ClearTote'])" data-bind="    style: { backgroundColor: ClearToteClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Clear away Tote</span>
        <br />
        <span data-bind="text: ClearToteCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.ClearLitterClicked, vm.ClearLitterCount, robotEventTypes['ClearLitter'])" data-bind="style: { backgroundColor: ClearLitterClicked() ? clickColor : colorAlt }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Clear away litter</span>
        <br />
        <span data-bind="text: ClearLitterCount()"></span>
        <br />
        <br />
    </div>
</div>

<div class="row" style="color:white">
    Litter and on the border
</div>

<div class="row">
    <div onclick="vm.abstractButtonFunction(vm.LitterPlacedAtHeightClicked, vm.LitterPlacedAtHeightCount, robotEventTypes['LitterPlacedAtHeight'])" data-bind="style: { backgroundColor: LitterPlacedAtHeightClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Litter put in stacked Container</span>
        <br />
        <span data-bind="text: LitterPlacedAtHeightCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.BulldozeLitterToLandfillClicked, vm.BulldozeLitterToLandfillCount, robotEventTypes['BulldozeLitterToLandfill'])" data-bind="style: { backgroundColor: BulldozeLitterToLandfillClicked() ? clickColor : colorAlt }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Litter to Landfill</span>
        <br />
        <span data-bind="text: BulldozeLitterToLandfillCount()"></span>
        <br />
        <br />
    </div>

    <div onclick="vm.abstractButtonFunction(vm.ContainersFromStepClicked, vm.ContainersFromStepCount, robotEventTypes['ContainersFromStep'])" data-bind="style: { backgroundColor: ContainersFromStepClicked() ? clickColor : color }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Containers from Step</span>
        <br />
        <span data-bind="text: ContainersFromStepCount()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.TeleopFoulClicked, vm.TeleopFoulCount, robotEventTypes['TeleopFoul'])" data-bind="    style: { backgroundColor: TeleopFoulClicked() ? clickColor : colorAlt }" style="border-style: solid; border-width: medium; border-color: white" class="col-xs-2">
        <br />
        <br />
        <span>Teleop Foul</span>
        <br />
        <span data-bind="text: TeleopFoulCount()"></span>
        <br />
        <br />
    </div>
</div>

<table>
    <thead>
        <tr>
            <th>Initial Stack Height</th>
            <th>Added Totes</th>
            <th>Added Container</th>
        </tr>
    </thead>
    <!--<tbody data-bind="foreach: StacksList">
        <tr data-bind="foreach: StackData">
            <td data-bind="value: StackData().StartingHeight"></td>
            <td data-bind="value: StackData().NumTotes"></td>
        </tr>
    </tbody>
        -->
</table>

<div class="row">
    <!--<div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <span>Oops</span>
        <br />
        <br />
        <br />
    </div>
        -->
</div>
<div class="row">
    <div data-bind="click: nav, style: {backgroundColor: colorAlt}" class="col-xs-2">
        <br />
        <br />
        <span>Notes</span>
        <br />
        <br />
        <br />
    </div>
</div>
<body></body>
</html>