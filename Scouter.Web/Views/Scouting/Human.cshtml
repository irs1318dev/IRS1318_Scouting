@model Scouter.Web.ViewModels.HumanScouterViewModel

@{
    ViewBag.Title = "Human Player Scouter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts{
    <script>
        var vm;
        var humanEventTypes = @Html.Raw(Model.HumanEventTypes);

        $(function ()
        {
            var Event = function ()
            {
                this.id = 0;
                this.scouter_Id = @Model.Scouter_Id;
                this.humanEventType = 0;
                this.team_Number = 0;
            }

            var ScoutInfo = function()
            {
                this.scouter = 0;
                this.match_Id = 0;
                this.scouterStatus = 0;
                this.team_Id = 0;
            }
            //
            // CLIENT SIDE VIEWMODEL
            //
            var ViewModel = function ()
            {
                var self = this;

                self.errorMessage = ko.observable("Waiting for next Match... If you believe that you should have advance, notify the lead scout that you are infact ready to advance. Then wait for further instructions.");

                //Add isClicked Booleans here/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.throwToOwnLandfillPressed1 = ko.observable(false);
                self.throwToOpponentLandfillPressed1 = ko.observable(false);
                self.throwPastOpponentLandfillPressed1 = ko.observable(false);
                self.throwShortOfOwnLandfillPressed1 = ko.observable(false);
                self.throwToStepPressed1 = ko.observable(false);
                self.failurePressed1 = ko.observable(false);

                self.throwToOwnLandfillPressed2 = ko.observable(false);
                self.throwToOpponentLandfillPressed2 = ko.observable(false);
                self.throwPastOpponentLandfillPressed2 = ko.observable(false);
                self.throwShortOfOwnLandfillPressed2 = ko.observable(false);
                self.throwToStepPressed2 = ko.observable(false);
                self.failurePressed2 = ko.observable(false);

                self.throwToOwnLandfillPressed3 = ko.observable(false);
                self.throwToOpponentLandfillPressed3 = ko.observable(false);
                self.throwPastOpponentLandfillPressed3 = ko.observable(false);
                self.throwShortOfOwnLandfillPressed3 = ko.observable(false);
                self.throwToStepPressed3 = ko.observable(false);
                self.failurePressed3 = ko.observable(false);

                self.oopsClicked = ko.observable(false);

                self.showWait = ko.observable(false);

                //Add Count integers here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.throwToOwnLandfillCount1 = ko.observable(0);
                self.throwToOpponentLandfillCount1 = ko.observable(0);
                self.throwPastOpponentLandfillCount1 = ko.observable(0);
                self.throwShortOfOwnLandfillCount1 = ko.observable(0);
                self.throwToStepCount1 = ko.observable(0);
                self.failureCount1 = ko.observable(0);

                self.throwToOwnLandfillCount2 = ko.observable(0);
                self.throwToOpponentLandfillCount2 = ko.observable(0);
                self.throwPastOpponentLandfillCount2 = ko.observable(0);
                self.throwShortOfOwnLandfillCount2 = ko.observable(0);
                self.throwToStepCount2 = ko.observable(0);
                self.failureCount2 = ko.observable(0);

                self.throwToOwnLandfillCount3 = ko.observable(0);
                self.throwToOpponentLandfillCount3 = ko.observable(0);
                self.throwPastOpponentLandfillCount3 = ko.observable(0);
                self.throwShortOfOwnLandfillCount3 = ko.observable(0);
                self.throwToStepCount3 = ko.observable(0);
                self.failureCount3 = ko.observable(0);

                self.clear = function()
                {
                    //Set all isClickd booleans to false here/////////////////////////////////////////////////////////////////////////////////////////////
                    self.throwToOwnLandfillPressed1(false);
                    self.throwToOpponentLandfillPressed1(false);
                    self.throwPastOpponentLandfillPressed1(false);
                    self.throwShortOfOwnLandfillPressed1(false);
                    self.throwToStepPressed1(false);
                    self.failurePressed1(false);

                    self.throwToOwnLandfillPressed2(false);
                    self.throwPastOpponentLandfillPressed2(false);
                    self.failurePressed2(false);
                    self.throwShortOfOwnLandfillPressed2(false);
                    self.throwToStepPressed2(false);
                    self.throwToOpponentLandfillPressed2(false);

                    self.throwToOwnLandfillPressed3(false);
                    self.throwPastOpponentLandfillPressed3(false);
                    self.throwShortOfOwnLandfillPressed3(false);
                    self.throwToStepPressed3(false);
                    self.failurePressed3(false);
                    self.throwToOpponentLandfillPressed3(false);

                    self.oopsClicked(false);
                }

                //Add on clicked functions here///////////////////////////////////////////////////////////////////////////////////////////////////////////
                self.abstractButtonFunction = function(clicked, count, humanEv, team)
                {
                    //reset all buttons to original color and then set self button to clicked color
                    self.clear();

                    clicked(true);
                    //add one to the count of clicks

                    if (typeof(count()) == typeof(0))
                    {
                        count(count() + 1);
                    }
                    else if (typeof(count()) == typeof(false))
                    {
                        count(!count());
                    }
                    else
                    {
                        // terrible
                    }
                    //Create a new robot event and set it's variables
                    var e = new Event();
                    e.humanEventType = humanEv;
                    e.team_Number = team;
                    //Send the robot event to the server
                    scouterDataService.saveHuman(ko.toJS(e));
                }

                self.oops = function()
                {
                    self.clear();
                    self.oopsClicked(true);
                    scouterDataService.undoHuman(@Model.Scouter_Id).done(function (data)
                    {
                        self.updateCounter();
                    });
                }

                self.updateCounter = function()
                {
                    scouterDataService.updateHumanCounter(@Model.Scouter_Id).done(function (data)
                    {
                        //set your counts to the server counts////////////////////////////////////////////////////////////////////////////////////////////
                        self.throwToOwnLandfillCount1(data.ThrowToOwnLandfill1);
                        self.throwToOwnLandfillCount2(data.ThrowToOwnLandfill2);
                        self.throwToOwnLandfillCount3(data.ThrowToOwnLandfill3);

                        self.throwPastOpponentLandfillCount1(data.ThrowPastOpponentLandfill1);
                        self.throwPastOpponentLandfillCount2(data.ThrowPastOpponentLandfill2);
                        self.throwPastOpponentLandfillCount3(data.ThrowPastOpponentLandfill3);

                        self.throwToOpponentLandfillCount1(data.ThrowToOpponentLandfill1);
                        self.throwToOpponentLandfillCount2(data.ThrowToOpponentLandfill2);
                        self.throwToOpponentLandfillCount3(data.ThrowToOpponentLandfill3);

                        self.throwShortOfOwnLandfillCount1(data.ThrowShortOfOwnLandfill1);
                        self.throwShortOfOwnLandfillCount2(data.ThrowShortOfOwnLandfill2);
                        self.throwShortOfOwnLandfillCount3(data.ThrowShortOfOwnLandfill3);

                        self.throwToStepCount1(data.ThrowToStep1);
                        self.throwToStepCount2(data.ThrowToStep2);
                        self.throwToStepCount3(data.ThrowToStep3);
                        
                        self.failureCount1(data.Failure1);
                        self.failureCount2(data.Failure2);
                        self.failureCount3(data.Failure3);
                    })
                }

                self.nav = function ()
                {
                    var v = scouterDataService.getScoutData().done(function (data)
                    {
                        if (data.Match_ID == @Model.Match.Id + 0)
                        {
                            $('#row1l').collapse('hide');
                            $('#row2l').collapse('hide');
                            $('#row3l').collapse('hide');
                            $('#row1c').collapse('hide');
                            $('#row2c').collapse('hide');
                            $('#row3c').collapse('hide');
                            $('#row4').collapse('hide');
                            $('#row1l').fadeOut();
                            $('#row2l').fadeOut();
                            $('#row3l').fadeOut();
                            $('#row1c').fadeOut();
                            $('#row2c').fadeOut();
                            $('#row3c').fadeOut();
                            $('#row4').fadeOut();

                            self.showWait(true);
                            setTimeout(self.navigation, 1000);
                        }
                        else
                        {
                            document.location = '/scouting/Auto/@Model.Scouter_Id';
                        }
                    }).fail(function (error)
                    {
                        $('#row1l').collapse('hide');
                        $('#row2l').collapse('hide');
                        $('#row3l').collapse('hide');
                        $('#row1c').collapse('hide');
                        $('#row2c').collapse('hide');
                        $('#row3c').collapse('hide');
                        $('#row4').collapse('hide');
                        $('#row1l').fadeOut();
                        $('#row2l').fadeOut();
                        $('#row3l').fadeOut();
                        $('#row1c').fadeOut();
                        $('#row2c').fadeOut();
                        $('#row3c').fadeOut();
                        $('#row4').fadeOut();


                        if (error.statusText)
                        {
                            self.errorMessage(error.statusText);
                        }

                        if (error.responseText)
                        {
                            var
                                msg = JSON.parse(error.responseText),
                                keys = _.keys(msg),
                                txt = '';

                            _.each(keys, function (key)
                            {
                                txt += msg[key] + ' ';
                            });
                            self.errorMessage(txt);
                        }

                        self.errorMessage("Oops. something happened.\n" + self.errorMessage());


                        var d = new ScoutInfo();
                        d.scouter = @Model.Scouter_Id;
                        d.scouterStatus = 3;
                        d.match_Id = @Model.Match.Id;

                        scouter

                        setTimeout(self.navigation, 5000);
                    })
                }

                self.navigation = function ()
                {
                    var v = scouterDataService.getScoutData().done(function (data)
                    {
                        if (data.Match_ID != @Model.Match.Id + 0)
                        {
                            document.location = '/scouting/Human/@Model.Scouter_Id';
                        }

                        var d = new ScoutInfo();
                        d.scouter = @Model.Scouter_Id + 0;
                        d.scouterStatus = 4;
                        d.match_Id = @Model.Match.Id;
                        d.team_Id = 0;

                        scouterDataService.updateScoutData(ko.toJS(d)).fail(function (error)
                        {
                            if (error.statusText)
                            {
                                self.errorMessage(error.statusText);
                            }

                            if (error.responseText)
                            {
                                var
                                    msg = JSON.parse(error.responseText),
                                    keys = _.keys(msg),
                                    txt = '';

                                _.each(keys, function (key)
                                {
                                    txt += msg[key] + ' ';
                                });
                                self.errorMessage(txt);
                            }

                            self.errorMessage("Oops. something happened. Still waiting for a match, but the Scout Admin doesn't know.\n" + self.errorMessage());
                        });

                        setTimeout(self.navigation, 1000);
                    }).fail(function (error)
                    {
                        $('#row1l').collapse('hide');
                        $('#row2l').collapse('hide');
                        $('#row3l').collapse('hide');
                        $('#row1c').collapse('hide');
                        $('#row2c').collapse('hide');
                        $('#row3c').collapse('hide');
                        $('#row4').collapse('hide');
                        $('#row1l').fadeOut();
                        $('#row2l').fadeOut();
                        $('#row3l').fadeOut();
                        $('#row1c').fadeOut();
                        $('#row2c').fadeOut();
                        $('#row3c').fadeOut();
                        $('#row4').fadeOut();


                        if (error.statusText)
                        {
                            self.errorMessage(error.statusText);
                        }

                        if (error.responseText)
                        {
                            var
                                msg = JSON.parse(error.responseText),
                                keys = _.keys(msg),
                                txt = '';

                            _.each(keys, function (key)
                            {
                                txt += msg[key] + ' ';
                            });
                            self.errorMessage(txt);
                        }

                        self.errorMessage("Oops. something happened.\n" + self.errorMessage());

                        setTimeout(self.navigation, 5000);
                    })
                }

                //set the colors for the buttons
                if (@Model.Scouter_Id < 8)//red scout
                {
                    self.color = 'red';
                    self.clickColor = 'pink';
                    self.colorAlt = '#FF4444';
                }
                else//blue scouts
                {
                    self.color = 'deepskyblue';
                    self.clickColor = 'lightblue';
                    self.colorAlt = 'skyblue';
                }

                var d = new ScoutInfo();
                d.scouter = @Model.Scouter_Id + 0;
                d.scouterStatus = 2;
                d.match_Id = @Model.Match.Id;
                d.team_Id = 0;

                scouterDataService.updateScoutData(ko.toJS(d));

                self.updateCounter();
            }

            //create the viewmodel and apply bindings
            vm = new ViewModel();
            ko.applyBindings(vm);
        });
    </script>
}
<div class="row" style="color:white">
    <span style="color:red; background-color:rgba(0, 0, 0, 0.8)">Human Player</span>
    <span style="font-size:16px; background-color:rgba(0, 0, 0, 0.8)" data-bind="text: ' Match: ' + @Model.Match.SequenceNumber" />
</div>

<div class="row" id="row1l">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Team: @Model.Team1.Number (@Model.Team1.Name)</span>
</div>
<div class="row" id="row1c">
    <!-- vm is where you should create the buttons for the row. the color should either be color or colorAlt(or any other colors you define)
         the class that I was using for the "small" buttons was col-xs-2 and col-xs-4 for the longer ones. One limitation of Bootstraps
         tables is that the rows can have a max of 12 columns -->
    <!-- data-bind="click: <your onClickeFunction>, style: {backgroundColor: <your isClickedBoolean>() ? clickColor : [color | colorAlt]} class="col-xs-2"-->
    <div onclick="vm.abstractButtonFunction(vm.throwShortOfOwnLandfillPressed1, vm.throwShortOfOwnLandfillCount1, humanEventTypes['ThrowShortOfOwnLandfill'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwShortOfOwnLandfillPressed1() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Short of Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwShortOfOwnLandfillCount1()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOwnLandfillPressed1, vm.throwToOwnLandfillCount1, humanEventTypes['ThrowToOwnLandfill'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOwnLandfillPressed1() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOwnLandfillCount1()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToStepPressed1, vm.throwToStepCount1, humanEventTypes['ThrowToStep'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToStepPressed1() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Throw to Step</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToStepCount1()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOpponentLandfillPressed1, vm.throwToOpponentLandfillCount1, humanEventTypes['ThrowToOpponentLandfill'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOpponentLandfillPressed1() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOpponentLandfillCount1()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwPastOpponentLandfillPressed1, vm.throwPastOpponentLandfillCount1, humanEventTypes['ThrowPastOpponentLandfill'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwPastOpponentLandfillPressed1() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Past Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwPastOpponentLandfillCount1()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.failurePressed1, vm.failureCount1, humanEventTypes['Failure'], 1)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: failurePressed1() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Failure</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: failureCount1()"></span>
        <br />
        <br />
    </div>
</div>
<div class="row" id="row2l">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Team: @Model.Team2.Number (@Model.Team2.Name)</span>
</div>
<div class="row" id="row2c">
    <!-- vm is where you should create the buttons for the row. the color should either be color or colorAlt(or any other colors you define)
         the class that I was using for the "small" buttons was col-xs-2 and col-xs-4 for the longer ones. One limitation of Bootstraps
         tables is that the rows can have a max of 12 columns -->
    <!-- data-bind="click: <your onClickeFunction>, style: {backgroundColor: <your isClickedBoolean>() ? clickColor : [color | colorAlt]} class="col-xs-2"-->
    <div onclick="vm.abstractButtonFunction(vm.throwShortOfOwnLandfillPressed2, vm.throwShortOfOwnLandfillCount2, humanEventTypes['ThrowShortOfOwnLandfill'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwShortOfOwnLandfillPressed2() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Short of Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwShortOfOwnLandfillCount2()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOwnLandfillPressed2, vm.throwToOwnLandfillCount2, humanEventTypes['ThrowToOwnLandfill'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOwnLandfillPressed2() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOwnLandfillCount2()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToStepPressed2, vm.throwToStepCount2, humanEventTypes['ThrowToStep'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToStepPressed2() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Throw to Step</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToStepCount2()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOpponentLandfillPressed2, vm.throwToOpponentLandfillCount2, humanEventTypes['ThrowToOpponentLandfill'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOpponentLandfillPressed2() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOpponentLandfillCount2()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwPastOpponentLandfillPressed2, vm.throwPastOpponentLandfillCount2, humanEventTypes['ThrowPastOpponentLandfill'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwPastOpponentLandfillPressed2() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Past Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwPastOpponentLandfillCount2()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.failurePressed2, vm.failureCount2, humanEventTypes['Failure'], 2)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: failurePressed2() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Failure</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: failureCount2()"></span>
        <br />
        <br />
    </div>
</div>
<div class="row" id="row3l">
    <span style="color:white; background-color:rgba(0, 0, 0, 0.8)">Team: @Model.Team3.Number (@Model.Team3.Name)</span>
</div>
<div class="row" id="row3c">
    <!-- vm is where you should create the buttons for the row. the color should either be color or colorAlt(or any other colors you define)
         the class that I was using for the "small" buttons was col-xs-2 and col-xs-4 for the longer ones. One limitation of Bootstraps
         tables is that the rows can have a max of 12 columns -->
    <!-- data-bind="click: <your onClickeFunction>, style: {backgroundColor: <your isClickedBoolean>() ? clickColor : [color | colorAlt]} class="col-xs-2"-->
    <div onclick="vm.abstractButtonFunction(vm.throwShortOfOwnLandfillPressed3, vm.throwShortOfOwnLandfillCount3, humanEventTypes['ThrowShortOfOwnLandfill'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwShortOfOwnLandfillPressed3() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Short of Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->

        <span data-bind="text: throwShortOfOwnLandfillCount3()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOwnLandfillPressed3, vm.throwToOwnLandfillCount3, humanEventTypes['ThrowToOwnLandfill'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOwnLandfillPressed3() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Own Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOwnLandfillCount3()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToStepPressed3, vm.throwToStepCount3, humanEventTypes['ThrowToStep'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToStepPressed3() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Throw to Step</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToStepCount3()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwToOpponentLandfillPressed3, vm.throwToOpponentLandfillCount3, humanEventTypes['ThrowToOpponentLandfill'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwToOpponentLandfillPressed3() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>To Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwToOpponentLandfillCount3()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.throwPastOpponentLandfillPressed3, vm.throwPastOpponentLandfillCount3, humanEventTypes['ThrowPastOpponentLandfill'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: throwPastOpponentLandfillPressed3() ? clickColor : colorAlt}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Past Opponent Landfill</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: throwPastOpponentLandfillCount3()"></span>
        <br />
        <br />
    </div>
    <div onclick="vm.abstractButtonFunction(vm.failurePressed3, vm.failureCount3, humanEventTypes['Failure'], 3)"
         style="border-style: solid; border-width: medium; border-color: white" data-bind="    style: {backgroundColor: failurePressed3() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <!--  Labels! -->
        <span>Failure</span>
        <br />
        <!--  data-bind="text: <Your countvariable>()" -->
        <span data-bind="text: failureCount3()"></span>
        <br />
        <br />
    </div>
</div>
<div class="row" id="row4">
    <div data-bind="click: oops, style: {backgroundColor: oopsClicked() ? clickColor : color}" class="col-xs-2">
        <br />
        <br />
        <span>Oops</span>
        <br />
        <br />
        <br />
    </div>
</div>
<div class="row">
    <div data-bind="click: nav, style: {backgroundColor: colorAlt}" class="col-xs-2">
        <br />
        <br />
        <span>Next Match</span>
        <br />
        <br />
        <br />
    </div>
    <div id="error" data-bind="visible: showWait(), style: {backgroundColor: color}" class="col-xs-10">
        <br />
        <span data-bind="text:errorMessage()"></span>
        <br />
        <br />
    </div>
</div>